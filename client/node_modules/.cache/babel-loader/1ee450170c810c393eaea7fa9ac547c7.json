{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/trainee/src/component/Modal-info/Modal-info.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { Button, Modal, ModalBody, ModalFooter, Table } from 'reactstrap';\nimport { generateString } from '../../specialFunction/specialFunction';\nimport { set_test } from '../../store/slices/testsReducer';\nimport \"./Modal-info.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalInfo = ({\n  isModal,\n  toggle,\n  info\n}) => {\n  _s();\n\n  const [pass, setPass] = useState(false);\n  const dispatch = useDispatch();\n\n  const passTest = () => {\n    toggle();\n    setPass(!pass);\n    dispatch(set_test({\n      name: info.name,\n      words: info.words\n    }));\n  };\n\n  if (pass) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/tests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n\n  console.log(info);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModal,\n      toggle: toggle,\n      children: [/*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"words-list\",\n            children: info === null || info === void 0 ? void 0 : info.words.map(word => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: word.en\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: word.ua\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 40,\n                  columnNumber: 23\n                }, this)]\n              }, generateString(), true, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"info\",\n          onClick: passTest,\n          children: \"PASS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"info\",\n          onClick: toggle,\n          children: \"UNDO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalInfo, \"g2GBY7Bsv9deQqZ9tla11OjqHQI=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ModalInfo;\nexport default ModalInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalInfo\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/src/component/Modal-info/Modal-info.tsx"],"names":["React","useState","useDispatch","Redirect","Button","Modal","ModalBody","ModalFooter","Table","generateString","set_test","ModalInfo","isModal","toggle","info","pass","setPass","dispatch","passTest","name","words","console","log","map","word","en","ua"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,SAAxB,EAAmCC,WAAnC,EAAgDC,KAAhD,QAA6D,YAA7D;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,OAAO,mBAAP;;;AAEA,MAAMC,SAAwB,GAAG,CAAC;AAChCC,EAAAA,OADgC;AAEhCC,EAAAA,MAFgC;AAGhCC,EAAAA;AAHgC,CAAD,KAI3B;AAAA;;AACJ,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMgB,QAAQ,GAAGf,WAAW,EAA5B;;AAEA,QAAMgB,QAAQ,GAAG,MAAM;AACrBL,IAAAA,MAAM;AACNG,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACAE,IAAAA,QAAQ,CAACP,QAAQ,CAAC;AAACS,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAAZ;AAAkBC,MAAAA,KAAK,EAAEN,IAAI,CAACM;AAA9B,KAAD,CAAT,CAAR;AACD,GAJD;;AAMA,MAAGL,IAAH,EAAS;AACP,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAEDM,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AAEA,sBACE;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEF,OAAf;AAAwB,MAAA,MAAM,EAAEC,MAAhC;AAAA,8BACE,QAAC,SAAD;AAAA,+BACE,QAAC,KAAD;AAAA,iCACE;AAAO,YAAA,SAAS,EAAC,YAAjB;AAAA,sBAEIC,IAFJ,aAEIA,IAFJ,uBAEIA,IAAI,CAAEM,KAAN,CAAYG,GAAZ,CAAiBC,IAAD,IAAoC;AAClD,kCACE;AAAA,wCACE;AAAA,4BAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAA,4BAAKD,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA,iBAASjB,cAAc,EAAvB;AAAA;AAAA;AAAA;AAAA,sBADF;AAMD,aAPD;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE,QAAC,WAAD;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,MAAd;AAAqB,UAAA,OAAO,EAAGS,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,MAAd;AAAqB,UAAA,OAAO,EAAGL,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CA9CD;;GAAMF,S;UAMaT,W;;;KANbS,S;AAgDN,eAAeA,SAAf","sourcesContent":["import React, {useState} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { Button, Modal, ModalBody, ModalFooter, Table } from 'reactstrap';\nimport { generateString } from '../../specialFunction/specialFunction';\nimport { set_test } from '../../store/slices/testsReducer';\nimport \"./Modal-info.scss\";\n\nconst ModalInfo: React.FC<any> = ({\n  isModal, \n  toggle,\n  info,\n}) => {\n  const [pass, setPass] = useState(false);\n  const dispatch = useDispatch();\n\n  const passTest = () => {\n    toggle();\n    setPass(!pass);\n    dispatch(set_test({name: info.name, words: info.words}));\n  }\n\n  if(pass) {\n    return <Redirect to=\"/tests\" />\n  }\n\n  console.log(info)\n\n  return (\n    <div>\n      <Modal isOpen={isModal} toggle={toggle}>\n        <ModalBody>\n          <Table>\n            <tbody className=\"words-list\">\n              {\n                info?.words.map((word: {en: string, ua: string}) => {\n                  return (\n                    <tr key={generateString()}>\n                      <td>{word.en}</td>\n                      <td>{word.ua}</td>\n                    </tr>\n                  )\n                })\n              }\n            </tbody>\n          </Table>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"info\" onClick={ passTest }>PASS</Button>\n          <Button color=\"info\" onClick={ toggle }>UNDO</Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\n\nexport default ModalInfo;"]},"metadata":{},"sourceType":"module"}