{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/GitHub/en/client/src/Pages/Profile/underPages/OwnDictionary/OwnDictionary.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button } from \"evergreen-ui\";\nimport React, { useState } from \"react\";\nimport { Table } from \"reactstrap\";\nimport Row from \"../../../../component/Row/Row\";\nimport SearchWord from \"../../../../component/SearchWord/SearchWord\";\nimport { useOwnDictionary } from \"../../../../hooks/useOwnDictionary\";\nimport { generateString } from \"../../../../specialFunction/specialFunction\";\nimport DataWords from \"./DataWords\";\nimport \"./OwnDictionary.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OwnDictionary = () => {\n  _s();\n\n  const ownDictionary = useOwnDictionary();\n  const [activeWord, setActive] = useState(\"\");\n  const [activePart, setActivePart] = useState(\"1 part\");\n  const [activePartOptions, setActivePartOptions] = useState(\"\");\n  const [shufflePart, toggleShufflePart] = useState(\"\");\n  const [isModal, setIsModal] = useState(false);\n\n  const toggleModal = () => setIsModal(!isModal);\n\n  const newActive = word => active === word ? setActive(\"\") : setActive(word);\n\n  const newActivePartOptions = part => activePartOptions === part ? setActivePartOptions(\"\") : setActivePartOptions(part);\n\n  const listWords = () => {\n    var _ownDictionary$idx, _ownDictionary$idx$wo;\n\n    const idx = ownDictionary.findIndex(item => item.part === activePart);\n    return (_ownDictionary$idx = ownDictionary[idx]) === null || _ownDictionary$idx === void 0 ? void 0 : (_ownDictionary$idx$wo = _ownDictionary$idx.words) === null || _ownDictionary$idx$wo === void 0 ? void 0 : _ownDictionary$idx$wo.map(word => /*#__PURE__*/_jsxDEV(DataWords, {\n      data: word,\n      active: active,\n      newActive: newActive,\n      activePart: activePart\n    }, generateString(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this));\n  };\n\n  if (isModal) {\n    prompt();\n  }\n\n  ;\n  const dictionaryTabs = ownDictionary.map(part => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"own-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        marginY: 8,\n        marginRight: 12,\n        onClick: () => setActivePart(part.part),\n        onDoubleClick: () => newActivePartOptions(part.part),\n        children: part.part\n      }, generateString(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${activePartOptions === part.part ? \"show\" : \"hide\"} part-option`,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          marginY: 8,\n          marginRight: 12,\n          onClick: () => toggleModal,\n          children: \"add word\"\n        }, generateString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          marginY: 8,\n          marginRight: 12,\n          onClick: () => toggleShufflePart(part.part),\n          children: \"shuffle\"\n        }, generateString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      Left: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [dictionaryTabs, /*#__PURE__*/_jsxDEV(Table, {\n          className: \"bg-light table-scroll top-20\",\n          style: {\n            height: \"100%\"\n          },\n          children: listWords()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this),\n      Right: /*#__PURE__*/_jsxDEV(SearchWord, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OwnDictionary, \"2PhCiFExpREGwAuYGB51qobNg04=\", false, function () {\n  return [useOwnDictionary];\n});\n\n_c = OwnDictionary;\nexport default OwnDictionary;\n\nvar _c;\n\n$RefreshReg$(_c, \"OwnDictionary\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/GitHub/en/client/src/Pages/Profile/underPages/OwnDictionary/OwnDictionary.tsx"],"names":["Button","React","useState","Table","Row","SearchWord","useOwnDictionary","generateString","DataWords","OwnDictionary","ownDictionary","activeWord","setActive","activePart","setActivePart","activePartOptions","setActivePartOptions","shufflePart","toggleShufflePart","isModal","setIsModal","toggleModal","newActive","word","active","newActivePartOptions","part","listWords","idx","findIndex","item","words","map","prompt","dictionaryTabs","height"],"mappings":"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","sourcesContent":["import { Button } from \"evergreen-ui\";\nimport React, { useState } from \"react\";\nimport { Table } from \"reactstrap\";\nimport Row from \"../../../../component/Row/Row\";\nimport SearchWord from \"../../../../component/SearchWord/SearchWord\";\nimport { useOwnDictionary } from \"../../../../hooks/useOwnDictionary\";\nimport { generateString } from \"../../../../specialFunction/specialFunction\";\nimport DataWords from \"./DataWords\";\nimport \"./OwnDictionary.scss\";\n\nconst OwnDictionary: React.FC = () => {\n  const ownDictionary: any = useOwnDictionary();\n  const [activeWord, setActive] = useState(\"\");\n  const [activePart, setActivePart] = useState(\"1 part\");\n  const [activePartOptions, setActivePartOptions] = useState(\"\");\n  const [shufflePart, toggleShufflePart] = useState(\"\");\n  const [isModal, setIsModal] = useState<boolean>(false);\n\n  const toggleModal = () => setIsModal(!isModal);\n\n  const newActive = (word: string) => active === word? setActive(\"\") : setActive(word);\n  const newActivePartOptions = (part: string) => activePartOptions === part? setActivePartOptions(\"\") : setActivePartOptions(part);\n\n  const listWords = () => {\n    const idx = ownDictionary.findIndex((item: any) => item.part === activePart);\n\n    return ownDictionary[idx]?.words?.map((word: any) => (\n      <DataWords data={word} active={active} newActive={newActive} key={generateString()} activePart={activePart}/>\n    ));\n  };\n\n  if(isModal) {\n    prompt();\n  };\n\n  const dictionaryTabs = ownDictionary.map((part: any) => {\n    return (\n      <div className=\"own-tabs\">\n        <Button \n          marginY={8} \n          marginRight={12}\n          key={generateString()} \n          onClick={() => setActivePart(part.part)}\n          onDoubleClick={() => newActivePartOptions(part.part)}\n        >\n          {part.part}\n        </Button>\n        <div className={`${activePartOptions === part.part? \"show\" : \"hide\"} part-option`}>\n          <Button \n            marginY={8} \n            marginRight={12}\n            key={generateString()} \n            onClick={() => toggleModal}\n          >\n            add word\n          </Button>\n          <Button \n            marginY={8} \n            marginRight={12}\n            key={generateString()} \n            onClick={() => toggleShufflePart(part.part)}\n          >\n            shuffle\n          </Button>\n        </div>\n      </div>\n    )\n  });\n\n  return (\n    <div>\n      <Row\n        Left={\n        <div>\n          {dictionaryTabs}\n          <Table className=\"bg-light table-scroll top-20\" style={{height: \"100%\"}}>{listWords()}</Table>\n        </div>}\n        Right={<SearchWord />}\n      />\n    </div>\n  )\n};\n\nexport default OwnDictionary;\n"]},"metadata":{},"sourceType":"module"}