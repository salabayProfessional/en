{"ast":null,"code":"import { allWords } from \"../mockData/words\";\n\nconst generateString = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n\nconst shuffle = array => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst createTest = words => (amount = 10) => {\n  let randomID = [];\n  let result = {\n    name: generateString(),\n    words: []\n  };\n\n  for (let i = 0; i < amount; i++) {\n    randomID.push(Math.floor(Math.random() * 555));\n  }\n\n  ;\n  randomID.map(id => result.words.push(words[id]));\n  return result;\n};\n\nconst checkAnswer = (word, answer) => {\n  return answer.includes(word);\n};\n\nconst auditTranslate = (test, answers, options, random) => {\n  const type = options.translate === \"en-ua\" ? \"en\" : \"ua\";\n  const words = test.words.map(word => word[type].toLowerCase());\n  const sortAnswers = random.map((_, idx) => answers[random.findIndex(e => e === idx)]);\n  const audit = words.filter((word, idx) => checkAnswer(word, sortAnswers[idx]));\n  return {\n    name: (test === null || test === void 0 ? void 0 : test.name) ? test.name : \"random\",\n    type: options.type,\n    words: test.words,\n    result: audit,\n    answers: sortAnswers,\n    options\n  };\n};\n\nexport { shuffle, generateString, auditTranslate };\nexport const madeTest = createTest(allWords);","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/client/src/specialFunction/specialFunction.ts"],"names":["allWords","generateString","Math","random","toString","replace","substr","shuffle","array","sort","createTest","words","amount","randomID","result","name","i","push","floor","map","id","checkAnswer","word","answer","includes","auditTranslate","test","answers","options","type","translate","toLowerCase","sortAnswers","_","idx","findIndex","e","audit","filter","madeTest"],"mappings":"AAAA,SAASA,QAAT,QAAyB,mBAAzB;;AAEA,MAAMC,cAAc,GAAG,MAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,OAA3B,CAAmC,UAAnC,EAA+C,EAA/C,EAAmDC,MAAnD,CAA0D,CAA1D,EAA6D,CAA7D,CAA7B;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAgB;AAC9B,SAAOA,KAAK,CAACC,IAAN,CAAW,MAAMP,IAAI,CAACC,MAAL,KAAgB,GAAjC,CAAP;AACD,CAFD;;AAIA,MAAMO,UAAe,GAAIC,KAAD,IAAgB,CAACC,MAAc,GAAG,EAAlB,KAAyB;AAC/D,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,MAAW,GAAG;AAACC,IAAAA,IAAI,EAAEd,cAAc,EAArB;AAAyBU,IAAAA,KAAK,EAAE;AAAhC,GAAlB;;AAEA,OAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,MAAnB,EAA4BI,CAAC,EAA7B,EAAiC;AAC7BH,IAAAA,QAAQ,CAACI,IAAT,CAAcf,IAAI,CAACgB,KAAL,CAAWhB,IAAI,CAACC,MAAL,KAAgB,GAA3B,CAAd;AACH;;AAAA;AAEDU,EAAAA,QAAQ,CAACM,GAAT,CAAcC,EAAD,IAAaN,MAAM,CAACH,KAAP,CAAaM,IAAb,CAAkBN,KAAK,CAACS,EAAD,CAAvB,CAA1B;AAEA,SAAON,MAAP;AACD,CAXD;;AAaA,MAAMO,WAAW,GAAG,CAACC,IAAD,EAAeC,MAAf,KAAkC;AACpD,SAAOA,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CAAP;AACD,CAFD;;AAIA,MAAMG,cAAc,GAAG,CACrBC,IADqB,EAErBC,OAFqB,EAGrBC,OAHqB,EAIrBzB,MAJqB,KAKlB;AACH,QAAM0B,IAAI,GAAID,OAAO,CAACE,SAAR,KAAsB,OAAtB,GAAgC,IAAhC,GAAuC,IAArD;AACA,QAAMnB,KAAK,GAAGe,IAAI,CAACf,KAAL,CAAWQ,GAAX,CAAgBG,IAAD,IAAeA,IAAI,CAACO,IAAD,CAAJ,CAAWE,WAAX,EAA9B,CAAd;AACA,QAAMC,WAAW,GAAG7B,MAAM,CAACgB,GAAP,CAAW,CAACc,CAAD,EAAIC,GAAJ,KAAYP,OAAO,CAACxB,MAAM,CAACgC,SAAP,CAAkBC,CAAD,IAAOA,CAAC,KAAKF,GAA9B,CAAD,CAA9B,CAApB;AAEA,QAAMG,KAAK,GAAG1B,KAAK,CAAC2B,MAAN,CAAa,CAAChB,IAAD,EAAeY,GAAf,KAA+Bb,WAAW,CAACC,IAAD,EAAOU,WAAW,CAACE,GAAD,CAAlB,CAAvD,CAAd;AAEA,SAAO;AACLnB,IAAAA,IAAI,EAAE,CAAAW,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEX,IAAN,IAAYW,IAAI,CAACX,IAAjB,GAAwB,QADzB;AAELc,IAAAA,IAAI,EAAED,OAAO,CAACC,IAFT;AAGLlB,IAAAA,KAAK,EAAEe,IAAI,CAACf,KAHP;AAILG,IAAAA,MAAM,EAAEuB,KAJH;AAKLV,IAAAA,OAAO,EAAEK,WALJ;AAMLJ,IAAAA;AANK,GAAP;AAQD,CApBD;;AAsBA,SACErB,OADF,EAEEN,cAFF,EAGEwB,cAHF;AAMA,OAAO,MAAMc,QAAQ,GAAG7B,UAAU,CAACV,QAAD,CAA3B","sourcesContent":["import { allWords } from \"../mockData/words\";\n\nconst generateString = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n\nconst shuffle = (array: any) => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst createTest: any = (words: any) => (amount: number = 10) => {\n  let randomID = [];\n  let result: any = {name: generateString(), words: []};\n\n  for(let i = 0; i < amount ; i++) {\n      randomID.push(Math.floor(Math.random() * 555));\n  };\n\n  randomID.map((id: any) => result.words.push(words[id]));\n\n  return result\n};\n\nconst checkAnswer = (word: string, answer: string) => {\n  return answer.includes(word)\n};\n\nconst auditTranslate = (\n  test: any,\n  answers: string[],\n  options: any,\n  random: number[]\n) => {\n  const type =  options.translate === \"en-ua\" ? \"en\" : \"ua\";\n  const words = test.words.map((word: any) => word[type].toLowerCase());\n  const sortAnswers = random.map((_, idx) => answers[random.findIndex((e) => e === idx) as any]);\n\n  const audit = words.filter((word: string, idx: number) => checkAnswer(word, sortAnswers[idx]));\n\n  return {\n    name: test?.name? test.name : \"random\",\n    type: options.type,\n    words: test.words,\n    result: audit,\n    answers: sortAnswers,\n    options,\n  };\n};\n\nexport {\n  shuffle,\n  generateString,\n  auditTranslate,\n}\n\nexport const madeTest = createTest(allWords);"]},"metadata":{},"sourceType":"module"}