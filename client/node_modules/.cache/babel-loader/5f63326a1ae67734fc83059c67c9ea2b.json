{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/trainee/client/src/pages/Profile/underPages/Dictionary/Dictionary.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { shuffle } from '../../../../specialFunction/specialFunction';\nimport DictionaryPart from './components/DictionaryPart/DictionaryPart';\nimport \"./Dictionary.scss\";\nimport { mockData } from './mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dictionary = () => {\n  _s();\n\n  const [isList, setIsList] = useState(false);\n\n  const toggleList = () => setIsList(!isList);\n\n  const [dictionaries, setDictionaries] = useState([]);\n  const [activeDictionary, setActiveDictionary] = useState(mockData[0]);\n\n  const toggleActiveListItem = name => {\n    if (name === activeDictionary) {\n      setActiveDictionary(mockData[0]);\n    } else {\n      setActiveDictionary(name);\n    }\n  };\n\n  useEffect(() => {\n    setDictionaries(mockData);\n  }, []);\n\n  const randomDictionaryWords = activeDictionary => {\n    setActiveDictionary({\n      name: activeDictionary.name,\n      words: shuffle(activeDictionary.words)\n    });\n  };\n\n  const tableSettingList = mockData.map(item => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"tbody\", {\n        onClick: () => toggleActiveListItem(item),\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            scope: \"row\",\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), activeDictionary.name === item.name && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"active-option\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-success\",\n          onClick: () => randomDictionaryWords(activeDictionary),\n          children: \"RANDOM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dictionary-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-9\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dictionary-words__party\",\n        children: /*#__PURE__*/_jsxDEV(DictionaryPart, {\n          activeDictionary: activeDictionary\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dictionary, \"4Ng9honCui3VRhV/4N9yMoE09sU=\");\n\n_c = Dictionary;\nexport default Dictionary;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dictionary\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/client/src/pages/Profile/underPages/Dictionary/Dictionary.tsx"],"names":["React","useEffect","useState","shuffle","DictionaryPart","mockData","Dictionary","isList","setIsList","toggleList","dictionaries","setDictionaries","activeDictionary","setActiveDictionary","toggleActiveListItem","name","randomDictionaryWords","words","tableSettingList","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,OAAT,QAAwB,6CAAxB;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAO,mBAAP;AACA,SAASC,QAAT,QAAyB,YAAzB;;;;AAEA,MAAMC,UAAoB,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAApC;;AACA,QAAMO,UAAU,GAAG,MAAMD,SAAS,CAAC,CAACD,MAAF,CAAlC;;AACA,QAAM,CAACG,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAM,EAAN,CAAhD;AACA,QAAM,CAACU,gBAAD,EAAmBC,mBAAnB,IAA0CX,QAAQ,CAAMG,QAAQ,CAAC,CAAD,CAAd,CAAxD;;AAEA,QAAMS,oBAAoB,GAAIC,IAAD,IAAkB;AAE7C,QAAGA,IAAI,KAAKH,gBAAZ,EAA8B;AAC5BC,MAAAA,mBAAmB,CAACR,QAAQ,CAAC,CAAD,CAAT,CAAnB;AACD,KAFD,MAEO;AACLQ,MAAAA,mBAAmB,CAACE,IAAD,CAAnB;AACD;AACF,GAPD;;AASAd,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,eAAe,CAACN,QAAD,CAAf;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMW,qBAAqB,GAAIJ,gBAAD,IAA2B;AACvDC,IAAAA,mBAAmB,CAAC;AAACE,MAAAA,IAAI,EAAEH,gBAAgB,CAACG,IAAxB;AAA8BE,MAAAA,KAAK,EAAEd,OAAO,CAACS,gBAAgB,CAACK,KAAlB;AAA5C,KAAD,CAAnB;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAGb,QAAQ,CAACc,GAAT,CAAcC,IAAD,IAAgB;AACpD,wBACE;AAAA,8BACE;AAAO,QAAA,OAAO,EAAE,MAAMN,oBAAoB,CAACM,IAAD,CAA1C;AAAA,+BACE;AAAA,iCACE;AAAI,YAAA,KAAK,EAAC,KAAV;AAAA,sBACGA,IAAI,CAACL;AADR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,EASGH,gBAAgB,CAACG,IAAjB,KAA0BK,IAAI,CAACL,IAA/B,iBACC;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACE;AAAQ,UAAA,SAAS,EAAC,yBAAlB;AAA4C,UAAA,OAAO,EAAE,MAAMC,qBAAqB,CAACJ,gBAAD,CAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA,oBADF;AAkBD,GAnBwB,CAAzB;AAqBA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA,+BACE,QAAC,cAAD;AAAgB,UAAA,gBAAgB,EAAEA;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAxDD;;GAAMN,U;;KAAAA,U;AA0DN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table } from 'reactstrap';\nimport { shuffle } from '../../../../specialFunction/specialFunction';\nimport DictionaryPart from './components/DictionaryPart/DictionaryPart';\nimport \"./Dictionary.scss\";\nimport { mockData } from './mockData';\n\nconst Dictionary: React.FC = () => {\n  const [isList, setIsList] = useState(false);\n  const toggleList = () => setIsList(!isList);\n  const [dictionaries, setDictionaries] = useState<any>([]);\n  const [activeDictionary, setActiveDictionary] = useState<any>(mockData[0]);\n\n  const toggleActiveListItem = (name: string) => {\n\n    if(name === activeDictionary) {\n      setActiveDictionary(mockData[0]);\n    } else {\n      setActiveDictionary(name);\n    }\n  }\n\n  useEffect(() => {\n    setDictionaries(mockData);\n  }, []);\n\n  const randomDictionaryWords = (activeDictionary: any) => {\n    setActiveDictionary({name: activeDictionary.name, words: shuffle(activeDictionary.words)});\n  };\n\n  const tableSettingList = mockData.map((item: any,) => {\n    return (\n      <>\n        <tbody onClick={() => toggleActiveListItem(item)}>\n          <tr>\n            <th scope=\"row\">\n              {item.name}\n            </th>\n          </tr>\n        </tbody>\n       {\n         activeDictionary.name === item.name && (\n          <div className=\"active-option\">\n            <button className=\"btn btn-outline-success\" onClick={() => randomDictionaryWords(activeDictionary)}>RANDOM</button>\n          </div>\n         )\n       }\n      </>\n    )\n  });\n\n  return (\n    <div className=\"dictionary-page\">\n      <div className=\"col-9\">\n          <div className=\"dictionary-words__party\">\n            <DictionaryPart activeDictionary={activeDictionary} />\n          </div>\n      </div>\n      <div className=\"col-3\">\n\n      </div>\n    </div>\n  );\n};\n\nexport default Dictionary;"]},"metadata":{},"sourceType":"module"}