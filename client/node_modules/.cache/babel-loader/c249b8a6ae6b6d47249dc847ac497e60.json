{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/trainee/client/src/component/SearchWord/SearchWord.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { add_word_own_dictionary, add_part_own_dictionary } from \"../../store/slices/authReducer\";\nimport SearchView from \"./SearchView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchWord = () => {\n  _s();\n\n  const API_BASE = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  ;\n  const initialState = {\n    word: \"\"\n  };\n\n  const onSubmit = async values => {\n    setLoading(true);\n    axios.get(API_BASE + values.word).then(d => {\n      setData(d.data);\n      setLoading(false);\n    });\n  };\n\n  const dispatchWord = data => {\n    const length = ownDictionary.length; //last idx\n\n    if (ownDictionary.length === 0) {\n      dispatch(add_part_own_dictionary({\n        part: `${length + 1} part`,\n        words: []\n      }));\n      dispatch(add_word_own_dictionary(data));\n    } else if (ownDictionary[length - 1].words.length >= 30) {\n      dispatch(add_word_own_dictionary(data));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(SearchView, {\n    initialState: initialState,\n    data: data,\n    dispatchWord: dispatchWord,\n    onSubmit: onSubmit,\n    loading: loading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n};\n\n_s(SearchWord, \"QAvLAr1qfZi3i2ohmQIqnp7fTIk=\", false, function () {\n  return [useDispatch];\n});\n\n_c = SearchWord;\nexport default SearchWord;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchWord\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/client/src/component/SearchWord/SearchWord.tsx"],"names":["axios","React","useState","useDispatch","add_word_own_dictionary","add_part_own_dictionary","SearchView","SearchWord","API_BASE","dispatch","data","setData","loading","setLoading","initialState","word","onSubmit","values","get","then","d","dispatchWord","length","ownDictionary","part","words"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gCAAjE;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,MAAMC,UAAoB,GAAG,MAAM;AAAA;;AACjC,QAAMC,QAAQ,GAAG,kDAAjB;AACA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAa,EAAb,CAAhC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AAIC;AAED,QAAMY,YAA2B,GAAE;AACjCC,IAAAA,IAAI,EAAE;AAD2B,GAAnC;;AAIA,QAAMC,QAAQ,GAAG,MAAOC,MAAP,IAAgC;AAC/CJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAb,IAAAA,KAAK,CAACkB,GAAN,CAAUV,QAAQ,GAAGS,MAAM,CAACF,IAA5B,EACCI,IADD,CACOC,CAAD,IAAY;AAChBT,MAAAA,OAAO,CAACS,CAAC,CAACV,IAAH,CAAP;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJD;AAKD,GAPD;;AASA,QAAMQ,YAAY,GAAIX,IAAD,IAAe;AAClC,UAAMY,MAAM,GAAGC,aAAa,CAACD,MAA7B,CADkC,CACG;;AACrC,QAAGC,aAAa,CAACD,MAAd,KAAyB,CAA5B,EAA+B;AAC7Bb,MAAAA,QAAQ,CAACJ,uBAAuB,CAAC;AAACmB,QAAAA,IAAI,EAAG,GAAEF,MAAM,GAAG,CAAE,OAArB;AAA6BG,QAAAA,KAAK,EAAE;AAApC,OAAD,CAAxB,CAAR;AACAhB,MAAAA,QAAQ,CAACL,uBAAuB,CAACM,IAAD,CAAxB,CAAR;AACD,KAHD,MAGO,IAAGa,aAAa,CAACD,MAAM,GAAG,CAAV,CAAb,CAA0BG,KAA1B,CAAgCH,MAAhC,IAA0C,EAA7C,EAAiD;AACtDb,MAAAA,QAAQ,CAACL,uBAAuB,CAACM,IAAD,CAAxB,CAAR;AACD;AACF,GARD;;AAUA,sBAAO,QAAC,UAAD;AACL,IAAA,YAAY,EAAEI,YADT;AAEL,IAAA,IAAI,EAAEJ,IAFD;AAGL,IAAA,YAAY,EAAEW,YAHT;AAIL,IAAA,QAAQ,EAAEL,QAJL;AAKL,IAAA,OAAO,EAAEJ;AALJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAOD,CAzCD;;GAAML,U;UAEaJ,W;;;KAFbI,U;AA2CN,eAAeA,UAAf","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { useAppSelector } from \"../../hooks/useRedux\";\nimport { add_word_own_dictionary, add_part_own_dictionary } from \"../../store/slices/authReducer\";\nimport { WordData } from \"../../store/slices/types\";\nimport SearchView from \"./SearchView\";\n\nconst SearchWord: React.FC = () => {\n  const API_BASE = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\n  const dispatch = useDispatch();\n\n  const [data, setData] = useState<WordData[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  interface InitialState {\n    word: string\n  };\n\n  const initialState : InitialState= {\n    word: \"\",\n  };\n\n  const onSubmit = async (values: InitialState) => {\n    setLoading(true);\n    axios.get(API_BASE + values.word)\n    .then((d: any) => {\n      setData(d.data);\n      setLoading(false);\n    })\n  };\n\n  const dispatchWord = (data: any) => {\n    const length = ownDictionary.length; //last idx\n    if(ownDictionary.length === 0) {\n      dispatch(add_part_own_dictionary({part: `${length + 1} part`, words: []}));\n      dispatch(add_word_own_dictionary(data));\n    } else if(ownDictionary[length - 1].words.length >= 30) {\n      dispatch(add_word_own_dictionary(data));\n    }\n  };\n\n  return <SearchView \n    initialState={initialState}\n    data={data}\n    dispatchWord={dispatchWord}\n    onSubmit={onSubmit}\n    loading={loading}\n  />\n};\n\nexport default SearchWord;\n"]},"metadata":{},"sourceType":"module"}