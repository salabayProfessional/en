{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/trainee/client/src/pages/Tests/Tests.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeTest, shuffle, auditTranslate } from '../../specialFunction/specialFunction';\nimport { push_audited_test } from '../../store/slices/resultReducer';\nimport { reset_test } from \"../../store/slices/testsReducer\";\nimport Options from '../../component/Options/Options';\nimport { ModalNotice } from '../../component/Modal/Modals';\nimport View from './View';\nimport Timer from '../../component/Timer/Timer';\nimport TasksPanel from \"./components/Tasks-panel/Tasks-panel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst makeRandomArr = arr => {\n  let randomArr = [];\n\n  for (let i = 0; i < arr; i++) {\n    randomArr.push(i);\n  }\n\n  return randomArr;\n};\n\nconst Test = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const options = useSelector(state => state.options.options);\n  const gotTest = useSelector(state => state.tests.test);\n  const [test, setTest] = useState([]);\n  const [count, setCount] = useState(0);\n  const [end, setEnd] = useState(false);\n  const [start, setStart] = useState(false);\n  const [isOptions, setIsOptions] = useState(false);\n  const [seeResults, setSeeResults] = useState(false);\n  const [random, setRandom] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);\n  const initialValues = {\n    answer: '',\n    answers: []\n  };\n\n  const onSubmit = values => {\n    values.answers.push(values.answer);\n    const auditedTest = auditTranslate(test, values.answers, options, random);\n    dispatch(push_audited_test(auditedTest));\n    setSeeResults(true);\n    setCount(0);\n    setStart(false);\n    setEnd(true);\n    values.answers = [];\n    values.answer = \"\";\n  };\n\n  const toggleOptions = () => setIsOptions(!isOptions);\n\n  const sendAnswer = (setFieldValue, values) => {\n    setCount(count + 1);\n    setFieldValue(\"answers\", [...values.answers, values.answer]);\n    setFieldValue(\"answer\", \"\");\n  };\n\n  const startTest = () => {\n    if (!gotTest) {\n      setTest(makeTest(options.words));\n    } else {\n      setTest(gotTest);\n    }\n\n    ;\n    setStart(true);\n    setEnd(false);\n    setIsOptions(false);\n    setSeeResults(false);\n    setRandom(shuffle(makeRandomArr(options.words)));\n    dispatch(reset_test());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page test\",\n    children: [start && /*#__PURE__*/_jsxDEV(Timer, {\n      timer: 60\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 18\n    }, this), isOptions && /*#__PURE__*/_jsxDEV(Options, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 22\n    }, this), !start && /*#__PURE__*/_jsxDEV(TasksPanel, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(ModalNotice, {\n      isModal: seeResults,\n      toggle: () => setSeeResults(!seeResults)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      onSubmit: values => onSubmit(values),\n      children: ({\n        values,\n        setFieldValue\n      }) => {\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(View, {\n            test: test,\n            count: count,\n            end: end,\n            start: start,\n            toggleOptions: toggleOptions,\n            options: options,\n            randomWords: random,\n            values: values,\n            setFieldValue: setFieldValue,\n            startTest: startTest,\n            sendAnswer: sendAnswer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Test, \"gDzS5nI13AoOHou7x9KiH5ndp5o=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/client/src/pages/Tests/Tests.tsx"],"names":["React","useState","Form","Formik","useDispatch","useSelector","makeTest","shuffle","auditTranslate","push_audited_test","reset_test","Options","ModalNotice","View","Timer","TasksPanel","makeRandomArr","arr","randomArr","i","push","Test","dispatch","options","state","gotTest","tests","test","setTest","count","setCount","end","setEnd","start","setStart","isOptions","setIsOptions","seeResults","setSeeResults","random","setRandom","initialValues","answer","answers","onSubmit","values","auditedTest","toggleOptions","sendAnswer","setFieldValue","startTest","words"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Form, Formik} from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeTest, shuffle, auditTranslate } from '../../specialFunction/specialFunction';\nimport { push_audited_test } from '../../store/slices/resultReducer';\nimport { reset_test } from \"../../store/slices/testsReducer\";\nimport Options from '../../component/Options/Options';\nimport { ModalNotice } from '../../component/Modal/Modals';\nimport View from './View';\nimport Timer from '../../component/Timer/Timer';\nimport TasksPanel from \"./components/Tasks-panel/Tasks-panel\";\nimport { RootReducer } from '../../store/slices/types';\nimport { InitialValues } from './types';\n\nconst makeRandomArr = (arr: any) => {\n  let randomArr = []; \n\n  for(let i = 0;i < arr; i++) {\n    randomArr.push(i);\n  }\n  return randomArr\n};\n\nconst Test: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const options = useSelector((state: RootReducer) => state.options.options);\n  const gotTest: any = useSelector((state: RootReducer) => state.tests.test);\n  const [test, setTest] = useState([]);\n  const [count, setCount] = useState(0);\n  const [end, setEnd] = useState(false);\n  const [start, setStart] = useState(false);\n  const [isOptions, setIsOptions] = useState(false);\n  const [seeResults, setSeeResults] = useState(false);\n  const [random, setRandom] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);\n\n  const initialValues: InitialValues = {\n    answer: '',\n    answers: [],\n  };\n\n  const onSubmit = (values: any) => {\n    values.answers.push(values.answer);\n    const auditedTest = auditTranslate(test, values.answers, options, random);\n    dispatch(push_audited_test(auditedTest));\n    setSeeResults(true);\n    setCount(0);\n    setStart(false);\n    setEnd(true);\n    values.answers = [];\n    values.answer = \"\";\n  };\n\n  const toggleOptions = () => setIsOptions(!isOptions);\n\n  const sendAnswer = (setFieldValue: Function, values: any) => {\n    setCount(count + 1);\n    setFieldValue(\"answers\", [...values.answers, values.answer]);\n    setFieldValue(\"answer\", \"\");\n  };\n\n  const startTest = () => {\n    if(!gotTest) {\n      setTest(makeTest(options.words));\n    }else {\n      setTest(gotTest);\n    };\n    setStart(true);\n    setEnd(false);\n    setIsOptions(false);\n    setSeeResults(false);\n    setRandom(shuffle(makeRandomArr(options.words)));\n    dispatch(reset_test());\n  };\n\n  return (\n    <div className=\"page test\">\n      { start && <Timer timer={60} /> }\n      { isOptions && <Options /> }\n      { !start && <TasksPanel /> }\n\n      <ModalNotice isModal={seeResults} toggle={() => setSeeResults(!seeResults)}/>\n\n      <Formik \n        initialValues={initialValues} \n        onSubmit={(values) => onSubmit(values)} \n      >\n        {({values, setFieldValue}) => {\n          return (\n            <Form>\n              <View\n                test={test} \n                count={count} \n                end={end}\n                start={start}\n                toggleOptions={toggleOptions}\n                options={options}\n                randomWords={random}\n                values={values}\n                setFieldValue={setFieldValue}\n                startTest={startTest}\n                sendAnswer={sendAnswer}\n              />\n            </Form>\n          )\n        }}\n      </Formik>\n    </div>\n  )\n};\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}