{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/trainee/client/src/component/SearchWord/SearchWord.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useAppSelector } from \"../../hooks/useRedux\";\nimport { add_word_own_dictionary, add_part_own_dictionary } from \"../../store/slices/authReducer\";\nimport SearchView from \"./SearchView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchWord = () => {\n  _s();\n\n  const API_BASE = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const ownDictionary = useAppSelector(state => state.auth.dictionary);\n  const initialState = {\n    word: \"\"\n  };\n\n  const onSubmit = async values => {\n    setLoading(true);\n    axios.get(API_BASE + values.word).then(d => {\n      setData(d.data);\n      setLoading(false);\n    });\n  };\n\n  const dispatchWord = data => {\n    const length = ownDictionary.length; //last idx\n\n    if (ownDictionary === []) {\n      dispatch(add_part_own_dictionary({\n        part: `${length + 1} part`,\n        words: [data]\n      }));\n    } else {\n      dispatch(add_word_own_dictionary(data));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(SearchView, {\n    initialState: initialState,\n    data: data,\n    dispatchWord: dispatchWord,\n    onSubmit: onSubmit,\n    loading: loading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, this);\n};\n\n_s(SearchWord, \"EkPxFgQLPeltFmZMaHM+6NGVNkA=\", false, function () {\n  return [useDispatch, useAppSelector];\n});\n\n_c = SearchWord;\nexport default SearchWord;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchWord\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/client/src/component/SearchWord/SearchWord.tsx"],"names":["axios","React","useState","useDispatch","useAppSelector","add_word_own_dictionary","add_part_own_dictionary","SearchView","SearchWord","API_BASE","dispatch","data","setData","loading","setLoading","ownDictionary","state","auth","dictionary","initialState","word","onSubmit","values","get","then","d","dispatchWord","length","part","words"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gCAAjE;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,MAAMC,UAAoB,GAAG,MAAM;AAAA;;AACjC,QAAMC,QAAQ,GAAG,kDAAjB;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAa,EAAb,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMa,aAAa,GAAGX,cAAc,CAACY,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,UAArB,CAApC;AAMA,QAAMC,YAA2B,GAAE;AACjCC,IAAAA,IAAI,EAAE;AAD2B,GAAnC;;AAIA,QAAMC,QAAQ,GAAG,MAAOC,MAAP,IAAgC;AAC/CR,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAd,IAAAA,KAAK,CAACuB,GAAN,CAAUd,QAAQ,GAAGa,MAAM,CAACF,IAA5B,EACCI,IADD,CACOC,CAAD,IAAY;AAChBb,MAAAA,OAAO,CAACa,CAAC,CAACd,IAAH,CAAP;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJD;AAKD,GAPD;;AASA,QAAMY,YAAY,GAAIf,IAAD,IAAe;AAClC,UAAMgB,MAAM,GAAGZ,aAAa,CAACY,MAA7B,CADkC,CACG;;AAErC,QAAGZ,aAAa,KAAK,EAArB,EAAyB;AACvBL,MAAAA,QAAQ,CAACJ,uBAAuB,CAAC;AAACsB,QAAAA,IAAI,EAAG,GAAED,MAAM,GAAG,CAAE,OAArB;AAA6BE,QAAAA,KAAK,EAAE,CAAClB,IAAD;AAApC,OAAD,CAAxB,CAAR;AACD,KAFD,MAEO;AACLD,MAAAA,QAAQ,CAACL,uBAAuB,CAACM,IAAD,CAAxB,CAAR;AACD;AACF,GARD;;AAUA,sBAAO,QAAC,UAAD;AACL,IAAA,YAAY,EAAEQ,YADT;AAEL,IAAA,IAAI,EAAER,IAFD;AAGL,IAAA,YAAY,EAAEe,YAHT;AAIL,IAAA,QAAQ,EAAEL,QAJL;AAKL,IAAA,OAAO,EAAER;AALJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAOD,CA1CD;;GAAML,U;UAEaL,W,EAIKC,c;;;KANlBI,U;AA4CN,eAAeA,UAAf","sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { useAppSelector } from \"../../hooks/useRedux\";\nimport { add_word_own_dictionary, add_part_own_dictionary } from \"../../store/slices/authReducer\";\nimport { WordData } from \"../../store/slices/types\";\nimport SearchView from \"./SearchView\";\n\nconst SearchWord: React.FC = () => {\n  const API_BASE = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\n  const dispatch = useDispatch();\n\n  const [data, setData] = useState<WordData[]>([]);\n  const [loading, setLoading] = useState(false);\n  const ownDictionary = useAppSelector(state => state.auth.dictionary);\n\n  interface InitialState {\n    word: string\n  }\n\n  const initialState : InitialState= {\n    word: \"\",\n  }\n\n  const onSubmit = async (values: InitialState) => {\n    setLoading(true);\n    axios.get(API_BASE + values.word)\n    .then((d: any) => {\n      setData(d.data);\n      setLoading(false);\n    })\n  };\n\n  const dispatchWord = (data: any) => {\n    const length = ownDictionary.length; //last idx\n\n    if(ownDictionary === []) {\n      dispatch(add_part_own_dictionary({part: `${length + 1} part`, words: [data]}));\n    } else {\n      dispatch(add_word_own_dictionary(data));\n    }\n  }\n\n  return <SearchView \n    initialState={initialState}\n    data={data}\n    dispatchWord={dispatchWord}\n    onSubmit={onSubmit}\n    loading={loading}\n  />\n};\n\nexport default SearchWord;\n"]},"metadata":{},"sourceType":"module"}