{"ast":null,"code":"import { allWords } from \"../mockData/words\";\n\nconst generateString = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n\nconst shuffle = array => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst auditTranslate = (test, answers, options, random) => {\n  const type = options.translate === \"en-ua\" ? \"en\" : \"ua\";\n  const words = test.words.map(word => word[type].toLowerCase());\n  const sortAnswers = random.map((_, idx) => answers[random.findIndex(e => e === idx)]);\n  const audit = words.filter((word, idx) => checkAnswer(word, sortAnswers[idx]));\n  return {\n    name: (test === null || test === void 0 ? void 0 : test.name) ? test.name : \"random\",\n    type: options.type,\n    words: test.words,\n    result: audit,\n    answers: sortAnswers,\n    options\n  };\n};\n\nexport { shuffle, generateString, auditTranslate };\nexport const makeTest = createTest(allWords);","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/client/src/specialFunction/specialFunction.ts"],"names":["allWords","generateString","Math","random","toString","replace","substr","shuffle","array","sort","auditTranslate","test","answers","options","type","translate","words","map","word","toLowerCase","sortAnswers","_","idx","findIndex","e","audit","filter","checkAnswer","name","result","makeTest","createTest"],"mappings":"AAAA,SAASA,QAAT,QAAyB,mBAAzB;;AAEA,MAAMC,cAAc,GAAG,MAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,OAA3B,CAAmC,UAAnC,EAA+C,EAA/C,EAAmDC,MAAnD,CAA0D,CAA1D,EAA6D,CAA7D,CAA7B;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAgB;AAC9B,SAAOA,KAAK,CAACC,IAAN,CAAW,MAAMP,IAAI,CAACC,MAAL,KAAgB,GAAjC,CAAP;AACD,CAFD;;AAIA,MAAMO,cAAc,GAAG,CACrBC,IADqB,EAErBC,OAFqB,EAGrBC,OAHqB,EAIrBV,MAJqB,KAKlB;AACH,QAAMW,IAAI,GAAID,OAAO,CAACE,SAAR,KAAsB,OAAtB,GAAgC,IAAhC,GAAuC,IAArD;AACA,QAAMC,KAAK,GAAGL,IAAI,CAACK,KAAL,CAAWC,GAAX,CAAgBC,IAAD,IAAeA,IAAI,CAACJ,IAAD,CAAJ,CAAWK,WAAX,EAA9B,CAAd;AACA,QAAMC,WAAW,GAAGjB,MAAM,CAACc,GAAP,CAAW,CAACI,CAAD,EAAIC,GAAJ,KAAYV,OAAO,CAACT,MAAM,CAACoB,SAAP,CAAkBC,CAAD,IAAOA,CAAC,KAAKF,GAA9B,CAAD,CAA9B,CAApB;AAEA,QAAMG,KAAK,GAAGT,KAAK,CAACU,MAAN,CAAa,CAACR,IAAD,EAAeI,GAAf,KAA+BK,WAAW,CAACT,IAAD,EAAOE,WAAW,CAACE,GAAD,CAAlB,CAAvD,CAAd;AAEA,SAAO;AACLM,IAAAA,IAAI,EAAE,CAAAjB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEiB,IAAN,IAAYjB,IAAI,CAACiB,IAAjB,GAAwB,QADzB;AAELd,IAAAA,IAAI,EAAED,OAAO,CAACC,IAFT;AAGLE,IAAAA,KAAK,EAAEL,IAAI,CAACK,KAHP;AAILa,IAAAA,MAAM,EAAEJ,KAJH;AAKLb,IAAAA,OAAO,EAAEQ,WALJ;AAMLP,IAAAA;AANK,GAAP;AAQD,CApBD;;AAsBA,SACEN,OADF,EAEEN,cAFF,EAGES,cAHF;AAMA,OAAO,MAAMoB,QAAQ,GAAGC,UAAU,CAAC/B,QAAD,CAA3B","sourcesContent":["import { allWords } from \"../mockData/words\";\n\nconst generateString = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n\nconst shuffle = (array: any) => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst auditTranslate = (\n  test: any,\n  answers: string[],\n  options: any,\n  random: number[]\n) => {\n  const type =  options.translate === \"en-ua\" ? \"en\" : \"ua\";\n  const words = test.words.map((word: any) => word[type].toLowerCase());\n  const sortAnswers = random.map((_, idx) => answers[random.findIndex((e) => e === idx) as any]);\n\n  const audit = words.filter((word: string, idx: number) => checkAnswer(word, sortAnswers[idx]));\n\n  return {\n    name: test?.name? test.name : \"random\",\n    type: options.type,\n    words: test.words,\n    result: audit,\n    answers: sortAnswers,\n    options,\n  };\n};\n\nexport {\n  shuffle,\n  generateString,\n  auditTranslate,\n}\n\nexport const makeTest = createTest(allWords);"]},"metadata":{},"sourceType":"module"}