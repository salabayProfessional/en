{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/trainee/client/src/pages/Profile/underPages/Dictionary/Dictionary.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { shuffle } from '../../../../specialFunction/specialFunction';\nimport DictionaryOptions from './components/DictionaryOptions/DictionaryOptions';\nimport DictionaryPart from './components/DictionaryPart/DictionaryPart';\nimport \"./Dictionary.scss\";\nimport { mockData } from './mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dictionary = () => {\n  _s();\n\n  const [isList, setIsList] = useState(false);\n\n  const toggleList = () => setIsList(!isList);\n\n  const [activeDictionary, setActiveDictionary] = useState(mockData[0]);\n  const [isHideColumnUa, setIsHideColumnUa] = useState(false);\n  const [isHideColumnEn, setIsHideColumnEn] = useState(false);\n\n  const toggleHideColumnUa = () => setIsHideColumnUa(!isHideColumnUa);\n\n  const toggleHideColumnEn = () => setIsHideColumnEn(!isHideColumnEn);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    watch,\n    formState: {\n      errors\n    }\n  } = useForm();\n\n  const toggleActiveItem = name => {\n    if (name === activeDictionary) {\n      setActiveDictionary(mockData[0]);\n    } else {\n      setActiveDictionary(name);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"Rerender\");\n  }, []);\n\n  const randomDictionaryWords = activeDictionary => {\n    setActiveDictionary({\n      name: activeDictionary.name,\n      words: shuffle(activeDictionary.words)\n    });\n  };\n\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"dictionary-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-9\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dictionary-words__party\",\n        children: /*#__PURE__*/_jsxDEV(DictionaryPart, {\n          activeDictionary: activeDictionary,\n          register: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-3\",\n      children: /*#__PURE__*/_jsxDEV(DictionaryOptions, {\n        isList: isList,\n        activeDictionary: activeDictionary,\n        randomDictionaryWords: randomDictionaryWords,\n        toggleActiveItem: toggleActiveItem,\n        toggleList: toggleList,\n        reset: reset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dictionary, \"vwvn8kxi2Ja3ww3TNjrqHviViKI=\", false, function () {\n  return [useForm];\n});\n\n_c = Dictionary;\nexport default Dictionary;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dictionary\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/client/src/pages/Profile/underPages/Dictionary/Dictionary.tsx"],"names":["React","useEffect","useState","useForm","shuffle","DictionaryOptions","DictionaryPart","mockData","Dictionary","isList","setIsList","toggleList","activeDictionary","setActiveDictionary","isHideColumnUa","setIsHideColumnUa","isHideColumnEn","setIsHideColumnEn","toggleHideColumnUa","toggleHideColumnEn","register","handleSubmit","reset","watch","formState","errors","toggleActiveItem","name","console","log","randomDictionaryWords","words","onSubmit","data"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { shuffle } from '../../../../specialFunction/specialFunction';\nimport DictionaryOptions from './components/DictionaryOptions/DictionaryOptions';\nimport DictionaryPart from './components/DictionaryPart/DictionaryPart';\nimport \"./Dictionary.scss\";\nimport { mockData } from './mockData';\n\nconst Dictionary: React.FC = () => {\n  const [isList, setIsList] = useState(false);\n  const toggleList = () => setIsList(!isList);\n  const [activeDictionary, setActiveDictionary] = useState<any>(mockData[0]);\n  const [isHideColumnUa, setIsHideColumnUa] = useState(false);\n  const [isHideColumnEn, setIsHideColumnEn] = useState(false);\n  const toggleHideColumnUa = () => setIsHideColumnUa(!isHideColumnUa);\n  const toggleHideColumnEn = () => setIsHideColumnEn(!isHideColumnEn);\n\n  const { register, handleSubmit, reset, watch, formState: { errors } } = useForm();\n\n  const toggleActiveItem = (name: string) => {\n    if(name === activeDictionary) {\n      setActiveDictionary(mockData[0]);\n    } else {\n      setActiveDictionary(name);\n    }\n  }\n\n  useEffect(() => {\n    console.log(\"Rerender\");\n  }, []);\n\n  const randomDictionaryWords = (activeDictionary: any) => {\n    setActiveDictionary({\n      name: activeDictionary.name, \n      words: shuffle(activeDictionary.words)\n    });\n  };\n\n  const onSubmit = (data: any) => {\n    console.log(data);\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"dictionary-page\">\n      <div className=\"col-9\">\n          <div className=\"dictionary-words__party\">\n            <DictionaryPart \n              activeDictionary={activeDictionary} \n              register={register}/>\n          </div>\n      </div>\n      <div className=\"col-3\">\n        <DictionaryOptions \n            isList={isList}\n            activeDictionary={activeDictionary}\n            randomDictionaryWords={randomDictionaryWords}\n            toggleActiveItem={toggleActiveItem}\n            toggleList={toggleList}\n            reset={reset}\n        />\n      </div>\n    </form>\n  );\n};\n\nexport default Dictionary;"]},"metadata":{},"sourceType":"module"}