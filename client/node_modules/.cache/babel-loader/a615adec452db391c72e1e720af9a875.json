{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/trainee/src/component/Modal/Modals.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { generateString } from '../../specialFunction/specialFunction';\nimport { set_test, create_test } from '../../store/slices/testsReducer';\nimport CornModal from './Modal';\nimport { Formik, Form, Field } from \"formik\";\nimport { Button, Table, FormGroup, ModalHeader } from 'reactstrap';\nimport { allWords } from \"../../mockData/words\";\nimport \"./Modal.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalInfo = ({\n  isModal,\n  toggle,\n  test\n}) => {\n  _s();\n\n  const [isPassTest, setIsPassTest] = useState(false);\n  const dispatch = useDispatch();\n\n  const passTest = () => {\n    toggle();\n    setIsPassTest(!isPassTest);\n    dispatch(set_test({\n      name: test.name,\n      words: test.words\n    }));\n  };\n\n  if (isPassTest) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/tests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(CornModal, {\n    isModal: isModal,\n    toggle: toggle,\n    isCancel: true,\n    isConfirm: true,\n    confirm: passTest,\n    isBody: true,\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      className: \"words-list\",\n      children: test === null || test === void 0 ? void 0 : test.words.map(word => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: word.en\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: word.ua\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this)]\n        }, generateString(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalInfo, \"M9Yul4S/SbuADUnPZOupdYQjy5U=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ModalInfo;\n\nconst ModalCreatedTest = ({\n  isModal,\n  toggle\n}) => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const initialValues = {\n    name: \"\",\n    words: [],\n    options: {\n      amount: 10,\n      type: \"en-ua\",\n      timer: 60\n    }\n  };\n  const allWordsList = allWords.map((word, idx) => {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: word.en\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: word.ua\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: /*#__PURE__*/_jsxDEV(Field, {\n          type: \"checkbox\",\n          value: word.en\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, `list-info-${idx}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  });\n\n  const onSubmit = values => {\n    dispatch(create_test({\n      name: values.name,\n      words: values.words,\n      type: \"en-ua\",\n      options: values.options\n    }));\n    toggle();\n  };\n\n  return /*#__PURE__*/_jsxDEV(CornModal, {\n    isModal: isModal,\n    toggle: toggle,\n    isCancel: true,\n    isConfirm: true,\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      onSubmit: values => onSubmit(values),\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"tbody\", {\n          className: \"words-list\",\n          children: allWordsList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input__name\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              type: \"text\",\n              placeholder: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ModalCreatedTest, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = ModalCreatedTest;\n\nconst ModalNotice = ({\n  isModal,\n  toggle\n}) => {\n  _s3();\n\n  const [redirect, setRedirect] = useState(false);\n\n  if (redirect) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/profile/results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CornModal, {\n    isModal: isModal,\n    toggle: toggle,\n    isBody: true,\n    children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n      toggle: toggle,\n      children: \"See result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"btn btn-outline-success\",\n      style: {\n        width: \"465px\"\n      },\n      onClick: () => {\n        setRedirect(true);\n        toggle();\n      },\n      children: \"To look\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(ModalNotice, \"CWdZc/XNNsJ2bMqPvAv6+207j+o=\");\n\n_c3 = ModalNotice;\n\nconst ModalResult = ({\n  isModal,\n  toggle,\n  result\n}) => {\n  _s4();\n\n  const dispatch = useDispatch();\n  const [isRepass, setIsRepass] = useState(false);\n\n  const repass = () => setIsRepass(true);\n\n  const reverseTest = result => {\n    return result.words.map(word => {\n      return {\n        en: word.en,\n        ua: word.ua\n      };\n    });\n  };\n\n  console.log(result);\n  const list = result === null || result === void 0 ? void 0 : result.words.map((word, idx) => {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: word.en\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: word.ua\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: result.answers[idx]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, generateString(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this);\n  });\n\n  const repassTest = () => {\n    dispatch(set_test({\n      name: result === null || result === void 0 ? void 0 : result.name,\n      test: reverseTest(result)\n    }));\n    repass();\n  };\n\n  if (isRepass) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/tests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 12\n    }, this);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(CornModal, {\n    isModal: isModal,\n    toggle: toggle,\n    isBody: false,\n    isConfirm: true,\n    confirm: repassTest,\n    confirmName: \"Repass\",\n    children: /*#__PURE__*/_jsxDEV(ModalHeader, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: result === null || result === void 0 ? void 0 : result.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: list\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-panel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-panel__left col-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"type: en-ua\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"true: \", result === null || result === void 0 ? void 0 : result.result.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 7\n  }, this);\n};\n\n_s4(ModalResult, \"1hDWgqMTfXQeTTZpCGeVS3kImI0=\", false, function () {\n  return [useDispatch];\n});\n\n_c4 = ModalResult;\nexport { ModalInfo, ModalCreatedTest, ModalNotice, ModalResult };\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ModalInfo\");\n$RefreshReg$(_c2, \"ModalCreatedTest\");\n$RefreshReg$(_c3, \"ModalNotice\");\n$RefreshReg$(_c4, \"ModalResult\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/src/component/Modal/Modals.tsx"],"names":["React","useState","useDispatch","Redirect","generateString","set_test","create_test","CornModal","Formik","Form","Field","Button","Table","FormGroup","ModalHeader","allWords","ModalInfo","isModal","toggle","test","isPassTest","setIsPassTest","dispatch","passTest","name","words","map","word","en","ua","ModalCreatedTest","initialValues","options","amount","type","timer","allWordsList","idx","onSubmit","values","ModalNotice","redirect","setRedirect","width","ModalResult","result","isRepass","setIsRepass","repass","reverseTest","console","log","list","answers","repassTest","length"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { generateString } from '../../specialFunction/specialFunction';\nimport { set_test, create_test } from '../../store/slices/testsReducer';\nimport CornModal from './Modal';\nimport { InitialValuesModalCreate, ModalInfoTypes, ModalType } from './types';\nimport { Formik, Form, Field } from \"formik\";\nimport { Button, Table, FormGroup, ModalHeader } from 'reactstrap';\nimport { allWords } from \"../../mockData/words\";\nimport \"./Modal.scss\";\n\nconst ModalInfo: React.FC<ModalInfoTypes> = ({\n  isModal, \n  toggle,\n  test,\n}) => {\n  const [isPassTest, setIsPassTest] = useState(false);\n  const dispatch = useDispatch();\n\n  const passTest = () => {\n    toggle();\n    setIsPassTest(!isPassTest);\n    dispatch(set_test({name: test.name, words: test.words}));\n  };\n\n  if(isPassTest) {\n    return <Redirect to=\"/tests\" />\n  };\n\n  return (\n    <CornModal \n      isModal={isModal} \n      toggle={toggle} \n      isCancel \n      isConfirm \n      confirm={passTest}\n      isBody\n    >\n      <tbody className=\"words-list\">\n        {\n          test?.words.map((word: {en: string, ua: string}) => {\n            return (\n              <tr key={generateString()}>\n                <td>{word.en}</td>\n                <td>{word.ua}</td>\n              </tr>\n            )\n          })\n        }\n      </tbody>\n   </CornModal>\n  );\n};\n\nconst ModalCreatedTest: React.FC<ModalType> = ({\n  isModal, \n  toggle,\n}) => {\n  const dispatch = useDispatch();\n\n  const initialValues: InitialValuesModalCreate = {\n    name: \"\",\n    words: [],\n    options: {\n      amount: 10,\n      type: \"en-ua\",\n      timer: 60,\n    },\n  }\n\n  const allWordsList = allWords.map((word: {en: string, ua: string}, idx: number) => {\n    return (\n      <tr key={`list-info-${idx}`}>\n        <td>{word.en}</td>\n        <td>{word.ua}</td>\n        <th><Field type=\"checkbox\" value={word.en}/></th>\n      </tr>\n    )\n  });\n\n  const onSubmit = (values: InitialValuesModalCreate) => {\n    dispatch(create_test({\n      name: values.name,\n      words: values.words,\n      type: \"en-ua\",\n      options: values.options\n    }));\n    toggle();\n  }\n\n  return (\n    <CornModal\n      isModal={isModal} \n      toggle={toggle} \n      isCancel \n      isConfirm \n    >\n      <Formik initialValues={initialValues} onSubmit={(values) => onSubmit(values)} >\n        <Form>\n          <tbody className=\"words-list\">\n            { allWordsList }\n          </tbody>\n          <FormGroup>\n            <div className=\"input__name\">\n              <input className=\"form-control\" type=\"text\" placeholder=\"name\"/>\n            </div>\n          </FormGroup>\n        </Form>\n      </Formik>\n    </CornModal>\n  );\n};\n\nconst ModalNotice: React.FC<ModalType> = ({isModal, toggle}) => {\n\n  const [redirect, setRedirect] = useState(false);\n\n  if(redirect) {\n    return <Redirect to=\"/profile/results\" />\n  }\n\n  return (\n    <CornModal isModal={isModal} toggle={toggle} isBody>\n      <ModalHeader toggle={toggle}>See result</ModalHeader>\n        <Button color=\"btn btn-outline-success\" style={{width: \"465px\"}} onClick={() => {\n          setRedirect(true);\n          toggle();\n        }}>To look</Button>\n    </CornModal>\n  )\n};\n\nconst ModalResult: React.FC<{\n  isModal: boolean,\n  toggle: () => void,\n  result: any\n}> = ({\n  isModal, \n  toggle,\n  result,\n}) => {\n  const dispatch = useDispatch();\n  const [isRepass, setIsRepass] = useState(false);\n\n  const repass = () => setIsRepass(true);\n\n  const reverseTest = (result: any) => {\n    return result.words.map((word: {en: string, ua: string}) => {\n      return { \n        en: word.en, ua: word.ua \n      }\n    });\n  }\n\n  console.log(result)\n\n  const list = result?.words.map((word: any, idx: number) => {\n    return (\n      <tr key={generateString()}>\n        <td>{word.en}</td>\n        <td>{word.ua}</td>\n        <td>{result.answers[idx]}</td>\n      </tr>\n    );\n  });\n\n  const repassTest = () => {\n    dispatch(set_test({name: result?.name, test: reverseTest(result)}));\n    repass();\n  };\n\n  if(isRepass) {\n    return <Redirect to=\"/tests\"/>\n  };\n\n  return (\n      <CornModal \n        isModal={isModal} \n        toggle={toggle} \n        isBody={false} \n        isConfirm\n        confirm={repassTest}\n        confirmName=\"Repass\"\n      >\n        <ModalHeader>\n          <h2 className=\"title\">{result?.name}</h2>\n          <Table>\n            <tbody>\n                {list}\n            </tbody>\n          </Table>\n          <div className=\"bottom-panel\"> \n            <div className=\"bottom-panel__left col-6\">\n              <div>type: en-ua</div>\n              <div>true: {result?.result.length}</div>\n            </div>\n          </div>\n        </ModalHeader>\n      </CornModal>\n  );\n};\n\nexport { \n  ModalInfo,\n  ModalCreatedTest,\n  ModalNotice,\n  ModalResult,\n};"]},"metadata":{},"sourceType":"module"}