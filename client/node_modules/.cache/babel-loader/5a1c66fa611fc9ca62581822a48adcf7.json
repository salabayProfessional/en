{"ast":null,"code":"import { allWords } from \"../mockData/words\";\n\nconst generateString = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n\nconst shuffle = array => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst test = words => (amount = 10) => {\n  let randomID = [];\n  let result = {\n    name: generateString(),\n    words: []\n  };\n\n  for (let i = 0; i < amount; i++) {\n    randomID.push(Math.floor(Math.random() * 555));\n  }\n\n  ;\n  randomID.map(id => result.words.push(words[id]));\n  return result;\n};\n\nconst checkAnwer = (word, answer) => {\n  return answer.includes(word);\n};\n\nconst auditTranslate = (test, answers, options, random) => {\n  const type = options.translate === \"en-ua\" ? \"en\" : \"ua\";\n  const words = test.words.map(word => word[type].toLowerCase());\n  const sortAnswers = random.map((_, idx) => answers[random.findIndex(e => e === idx)]);\n  const audit = words.filter((word, idx) => {\n    return word === sortAnswers[idx];\n  });\n  return {\n    name: (test === null || test === void 0 ? void 0 : test.name) ? test.name : \"random\",\n    type: options.type,\n    words: test.words,\n    result: audit,\n    answers: sortAnswers,\n    options\n  };\n};\n\nexport { shuffle, generateString, auditTranslate };\nexport const makeTest = test(allWords);","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/client/src/specialFunction/specialFunction.ts"],"names":["allWords","generateString","Math","random","toString","replace","substr","shuffle","array","sort","test","words","amount","randomID","result","name","i","push","floor","map","id","checkAnwer","word","answer","includes","auditTranslate","answers","options","type","translate","toLowerCase","sortAnswers","_","idx","findIndex","e","audit","filter","makeTest"],"mappings":"AAAA,SAASA,QAAT,QAAyB,mBAAzB;;AAEA,MAAMC,cAAc,GAAG,MAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,OAA3B,CAAmC,UAAnC,EAA+C,EAA/C,EAAmDC,MAAnD,CAA0D,CAA1D,EAA6D,CAA7D,CAA7B;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAgB;AAC9B,SAAOA,KAAK,CAACC,IAAN,CAAW,MAAMP,IAAI,CAACC,MAAL,KAAgB,GAAjC,CAAP;AACD,CAFD;;AAIA,MAAMO,IAAS,GAAIC,KAAD,IAAgB,CAACC,MAAc,GAAG,EAAlB,KAAyB;AACzD,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,MAAW,GAAG;AAACC,IAAAA,IAAI,EAAEd,cAAc,EAArB;AAAyBU,IAAAA,KAAK,EAAE;AAAhC,GAAlB;;AAEA,OAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,MAAnB,EAA4BI,CAAC,EAA7B,EAAiC;AAC7BH,IAAAA,QAAQ,CAACI,IAAT,CAAcf,IAAI,CAACgB,KAAL,CAAWhB,IAAI,CAACC,MAAL,KAAgB,GAA3B,CAAd;AACH;;AAAA;AAEDU,EAAAA,QAAQ,CAACM,GAAT,CAAcC,EAAD,IAAaN,MAAM,CAACH,KAAP,CAAaM,IAAb,CAAkBN,KAAK,CAACS,EAAD,CAAvB,CAA1B;AAEA,SAAON,MAAP;AACD,CAXD;;AAaA,MAAMO,UAAU,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACnC,SAAOA,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CAAP;AACD,CAFD;;AAIA,MAAMG,cAAc,GAAG,CACrBf,IADqB,EAErBgB,OAFqB,EAGrBC,OAHqB,EAIrBxB,MAJqB,KAKlB;AACH,QAAMyB,IAAI,GAAID,OAAO,CAACE,SAAR,KAAsB,OAAtB,GAAgC,IAAhC,GAAuC,IAArD;AACA,QAAMlB,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAWQ,GAAX,CAAgBG,IAAD,IAAeA,IAAI,CAACM,IAAD,CAAJ,CAAWE,WAAX,EAA9B,CAAd;AACA,QAAMC,WAAW,GAAG5B,MAAM,CAACgB,GAAP,CAAW,CAACa,CAAD,EAAIC,GAAJ,KAAYP,OAAO,CAACvB,MAAM,CAAC+B,SAAP,CAAkBC,CAAD,IAAOA,CAAC,KAAKF,GAA9B,CAAD,CAA9B,CAApB;AAEA,QAAMG,KAAK,GAAGzB,KAAK,CAAC0B,MAAN,CAAa,CAACf,IAAD,EAAeW,GAAf,KAA+B;AAExD,WAAOX,IAAI,KAAKS,WAAW,CAACE,GAAD,CAA3B;AACD,GAHa,CAAd;AAKA,SAAO;AACLlB,IAAAA,IAAI,EAAE,CAAAL,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEK,IAAN,IAAYL,IAAI,CAACK,IAAjB,GAAwB,QADzB;AAELa,IAAAA,IAAI,EAAED,OAAO,CAACC,IAFT;AAGLjB,IAAAA,KAAK,EAAED,IAAI,CAACC,KAHP;AAILG,IAAAA,MAAM,EAAEsB,KAJH;AAKLV,IAAAA,OAAO,EAAEK,WALJ;AAMLJ,IAAAA;AANK,GAAP;AAQD,CAvBD;;AAyBA,SACEpB,OADF,EAEEN,cAFF,EAGEwB,cAHF;AAMA,OAAO,MAAMa,QAAQ,GAAG5B,IAAI,CAACV,QAAD,CAArB","sourcesContent":["import { allWords } from \"../mockData/words\";\n\nconst generateString = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n\nconst shuffle = (array: any) => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst test: any = (words: any) => (amount: number = 10) => {\n  let randomID = [];\n  let result: any = {name: generateString(), words: []};\n\n  for(let i = 0; i < amount ; i++) {\n      randomID.push(Math.floor(Math.random() * 555));\n  };\n\n  randomID.map((id: any) => result.words.push(words[id]));\n\n  return result\n};\n\nconst checkAnwer = (word, answer) => {\n  return answer.includes(word)\n};\n\nconst auditTranslate = (\n  test: any,\n  answers: string[],\n  options: any,\n  random: number[]\n) => {\n  const type =  options.translate === \"en-ua\" ? \"en\" : \"ua\";\n  const words = test.words.map((word: any) => word[type].toLowerCase());\n  const sortAnswers = random.map((_, idx) => answers[random.findIndex((e) => e === idx) as any]);\n\n  const audit = words.filter((word: string, idx: number) => {\n\n    return word === sortAnswers[idx];\n  });\n\n  return {\n    name: test?.name? test.name : \"random\",\n    type: options.type,\n    words: test.words,\n    result: audit,\n    answers: sortAnswers,\n    options,\n  };\n};\n\nexport {\n  shuffle,\n  generateString,\n  auditTranslate,\n}\n\nexport const makeTest = test(allWords);"]},"metadata":{},"sourceType":"module"}