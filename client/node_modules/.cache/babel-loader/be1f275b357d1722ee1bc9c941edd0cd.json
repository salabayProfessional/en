{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/trainee/src/component/Modal/Modals.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { generateString } from '../../specialFunction/specialFunction';\nimport { set_test } from '../../store/slices/testsReducer';\nimport CornModal from './Modal';\nimport { Formik, Form, Field } from \"formik\";\nimport { Button, Modal, ModalBody, ModalFooter, Table, FormGroup } from 'reactstrap';\nimport { allWords } from \"../../mockData/words\";\nimport { create_test } from \"../../store/slices/testsReducer\";\nimport \"./Modal.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ModalInfo = ({\n  isModal,\n  toggle,\n  test\n}) => {\n  _s();\n\n  const [isPassTest, setIsPassTest] = useState(false);\n  const dispatch = useDispatch();\n\n  const passTest = () => {\n    toggle();\n    setIsPassTest(!isPassTest);\n    dispatch(set_test({\n      name: test.name,\n      words: test.words\n    }));\n  };\n\n  if (isPassTest) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/tests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(CornModal, {\n    isModal: isModal,\n    toggle: toggle,\n    isCancel: true,\n    isConfirm: true,\n    confirm: passTest,\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      className: \"words-list\",\n      children: test === null || test === void 0 ? void 0 : test.words.map(word => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: word.en\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: word.ua\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this)]\n        }, generateString(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ModalInfo, \"M9Yul4S/SbuADUnPZOupdYQjy5U=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ModalInfo;\n\nconst ModalCreated = ({\n  modal,\n  toggle\n}) => {\n  _s2();\n\n  const dispatch = useDispatch();\n  const initialValues = {\n    name: \"\",\n    words: [],\n    options: {\n      amount: 10,\n      type: \"en-ua\",\n      timer: 60\n    }\n  };\n  const allWordsList = allWords.map((word, idx) => {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: word.en\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: word.ua\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: /*#__PURE__*/_jsxDEV(Field, {\n          type: \"checkbox\",\n          value: word.en\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, `list-info-${idx}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  });\n\n  const onSubmit = values => {\n    dispatch(create_test({\n      name: values.name,\n      words: values.words,\n      type: \"en-ua\",\n      options: values.options\n    }));\n    toggle();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    onSubmit: values => onSubmit(values),\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modal,\n      toggle: toggle,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal__table\",\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              className: \"bg-dark\",\n              children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: allWordsList\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input__name\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              type: \"text\",\n              placeholder: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"success\",\n            type: \"submit\",\n            children: \"SAVE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"danger\",\n            onClick: toggle,\n            children: \"UNDO\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ModalCreated, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = ModalCreated;\nexport default ModalCreated;\nexport { ModalInfo };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModalInfo\");\n$RefreshReg$(_c2, \"ModalCreated\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/src/component/Modal/Modals.tsx"],"names":["React","useState","useDispatch","Redirect","generateString","set_test","CornModal","Formik","Form","Field","Button","Modal","ModalBody","ModalFooter","Table","FormGroup","allWords","create_test","ModalInfo","isModal","toggle","test","isPassTest","setIsPassTest","dispatch","passTest","name","words","map","word","en","ua","ModalCreated","modal","initialValues","options","amount","type","timer","allWordsList","idx","onSubmit","values"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,OAAOC,SAAP,MAAsB,SAAtB;AAEA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,QAApC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,SAAxB,EAAmCC,WAAnC,EAAgDC,KAAhD,EAAuDC,SAAvD,QAAwE,YAAxE;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,OAAO,cAAP;;;AAEA,MAAMC,SAAmC,GAAG,CAAC;AAC3CC,EAAAA,OAD2C;AAE3CC,EAAAA,MAF2C;AAG3CC,EAAAA;AAH2C,CAAD,KAItC;AAAA;;AACJ,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMuB,QAAQ,GAAGtB,WAAW,EAA5B;;AAEA,QAAMuB,QAAQ,GAAG,MAAM;AACrBL,IAAAA,MAAM;AACNG,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACAE,IAAAA,QAAQ,CAACnB,QAAQ,CAAC;AAACqB,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAAZ;AAAkBC,MAAAA,KAAK,EAAEN,IAAI,CAACM;AAA9B,KAAD,CAAT,CAAR;AACD,GAJD;;AAMA,MAAGL,UAAH,EAAe;AACb,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAAA;AAED,sBACE,QAAC,SAAD;AACE,IAAA,OAAO,EAAEH,OADX;AAEE,IAAA,MAAM,EAAEC,MAFV;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,OAAO,EAAEK,QALX;AAAA,2BAOE;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA,gBAEIJ,IAFJ,aAEIA,IAFJ,uBAEIA,IAAI,CAAEM,KAAN,CAAYC,GAAZ,CAAiBC,IAAD,IAAoC;AAClD,4BACE;AAAA,kCACE;AAAA,sBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAKD,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,WAAS3B,cAAc,EAAvB;AAAA;AAAA;AAAA;AAAA,gBADF;AAMD,OAPD;AAFJ;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAxCD;;GAAMc,S;UAMahB,W;;;KANbgB,S;;AA0CN,MAAMc,YAA2B,GAAG,CAAC;AACnCC,EAAAA,KADmC;AAEnCb,EAAAA;AAFmC,CAAD,KAG9B;AAAA;;AACJ,QAAMI,QAAQ,GAAGtB,WAAW,EAA5B;AAeA,QAAMgC,aAAa,GAAG;AACpBR,IAAAA,IAAI,EAAE,EADc;AAEpBC,IAAAA,KAAK,EAAE,EAFa;AAGpBQ,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,EADD;AAEPC,MAAAA,IAAI,EAAE,OAFC;AAGPC,MAAAA,KAAK,EAAE;AAHA;AAHW,GAAtB;AAUA,QAAMC,YAAY,GAAGvB,QAAQ,CAACY,GAAT,CAAa,CAACC,IAAD,EAAiCW,GAAjC,KAAiD;AACjF,wBACE;AAAA,8BACE;AAAA,kBAAKX,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKD,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,+BAAI,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,KAAK,EAAEF,IAAI,CAACC;AAAnC;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA,OAAU,aAAYU,GAAI,EAA1B;AAAA;AAAA;AAAA;AAAA,YADF;AAOD,GARoB,CAArB;;AAUA,QAAMC,QAAQ,GAAIC,MAAD,IAA2B;AAC1ClB,IAAAA,QAAQ,CAACP,WAAW,CAAC;AACnBS,MAAAA,IAAI,EAAEgB,MAAM,CAAChB,IADM;AAEnBC,MAAAA,KAAK,EAAEe,MAAM,CAACf,KAFK;AAGnBU,MAAAA,IAAI,EAAE,OAHa;AAInBF,MAAAA,OAAO,EAAEO,MAAM,CAACP;AAJG,KAAD,CAAZ,CAAR;AAMAf,IAAAA,MAAM;AACP,GARD;;AAUA,sBACE,QAAC,MAAD;AAAQ,IAAA,aAAa,EAAEc,aAAvB;AAAsC,IAAA,QAAQ,EAAGQ,MAAD,IAAYD,QAAQ,CAACC,MAAD,CAApE;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,MAAM,EAAET,KAAf;AAAsB,MAAA,MAAM,EAAEb,MAA9B;AAAA,6BACE,QAAC,IAAD;AAAA,gCACE,QAAC,SAAD;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA,mCACE,QAAC,KAAD;AAAO,cAAA,SAAS,EAAC,SAAjB;AAAA,qCACE;AAAA,0BACImB;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE,QAAC,SAAD;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,mCACE;AAAO,cAAA,SAAS,EAAC,cAAjB;AAAgC,cAAA,IAAI,EAAC,MAArC;AAA4C,cAAA,WAAW,EAAC;AAAxD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAVF,eAeE,QAAC,WAAD;AAAA,kCACE,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,SAAd;AAAwB,YAAA,IAAI,EAAC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,QAAd;AAAuB,YAAA,OAAO,EAAEnB,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CA3ED;;IAAMY,Y;UAIa9B,W;;;MAJb8B,Y;AA6EN,eAAeA,YAAf;AAEA,SACEd,SADF","sourcesContent":["import React, {useState} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { generateString } from '../../specialFunction/specialFunction';\nimport { set_test } from '../../store/slices/testsReducer';\nimport CornModal from './Modal';\nimport { ModalInfoTypes } from './types';\nimport { Formik, Form, Field } from \"formik\";\nimport { Button, Modal, ModalBody, ModalFooter, Table, FormGroup } from 'reactstrap';\nimport { allWords } from \"../../mockData/words\";\nimport { create_test } from \"../../store/slices/testsReducer\";\nimport \"./Modal.scss\";\n\nconst ModalInfo: React.FC<ModalInfoTypes> = ({\n  isModal, \n  toggle,\n  test,\n}) => {\n  const [isPassTest, setIsPassTest] = useState(false);\n  const dispatch = useDispatch();\n\n  const passTest = () => {\n    toggle();\n    setIsPassTest(!isPassTest);\n    dispatch(set_test({name: test.name, words: test.words}));\n  };\n\n  if(isPassTest) {\n    return <Redirect to=\"/tests\" />\n  };\n\n  return (\n    <CornModal \n      isModal={isModal} \n      toggle={toggle} \n      isCancel \n      isConfirm \n      confirm={passTest}\n    >\n      <tbody className=\"words-list\">\n        {\n          test?.words.map((word: {en: string, ua: string}) => {\n            return (\n              <tr key={generateString()}>\n                <td>{word.en}</td>\n                <td>{word.ua}</td>\n              </tr>\n            )\n          })\n        }\n      </tbody>\n   </CornModal>\n  );\n};\n\nconst ModalCreated: React.FC<any> = ({\n  modal, \n  toggle,\n}) => {\n  const dispatch = useDispatch();\n\n  interface InitialValues {\n    name: string,\n    options: {\n      amount: number,\n      type: string,\n      timer: number,\n    },\n    words: { \n      en: string, \n      ua: string \n    }[],\n  }\n\n  const initialValues = {\n    name: \"\",\n    words: [],\n    options: {\n      amount: 10,\n      type: \"en-ua\",\n      timer: 60,\n    },\n  }\n\n  const allWordsList = allWords.map((word: {en: string, ua: string}, idx: number) => {\n    return (\n      <tr key={`list-info-${idx}`}>\n        <td>{word.en}</td>\n        <td>{word.ua}</td>\n        <th><Field type=\"checkbox\" value={word.en}/></th>\n      </tr>\n    )\n  });\n\n  const onSubmit = (values: InitialValues) => {\n    dispatch(create_test({\n      name: values.name,\n      words: values.words,\n      type: \"en-ua\",\n      options: values.options\n    }));\n    toggle();\n  }\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={(values) => onSubmit(values)} >\n      <Modal isOpen={modal} toggle={toggle}>\n        <Form>\n          <ModalBody>\n            <div className=\"modal__table\">\n              <Table className=\"bg-dark\">\n                <tbody>\n                  { allWordsList }\n                </tbody>\n              </Table>\n            </div>\n          </ModalBody>\n          <FormGroup>\n            <div className=\"input__name\">\n              <input className=\"form-control\" type=\"text\" placeholder=\"name\"/>\n            </div>\n          </FormGroup>\n          <ModalFooter>\n            <Button color=\"success\" type=\"submit\">SAVE</Button>\n            <Button color=\"danger\" onClick={toggle}>UNDO</Button>\n          </ModalFooter>\n        </Form>\n      </Modal>\n    </Formik>\n  );\n}\n\nexport default ModalCreated;\n\nexport { \n  ModalInfo \n};"]},"metadata":{},"sourceType":"module"}