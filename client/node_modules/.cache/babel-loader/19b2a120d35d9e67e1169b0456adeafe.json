{"ast":null,"code":"import { allWords } from \"../mockData/words\";\n\nconst generateString = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n\nconst shuffle = array => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst auditTranslate = (test, answers, options, random) => {\n  const type = options.translate === \"en-ua\" ? \"en\" : \"ua\";\n  const words = test.words.map(word => word[type].toLowerCase());\n  const sortedAnswers = random.map((_, idx) => answers[random.findIndex(e => e === idx)]);\n  const audit = words.filter((word, idx) => checkAnswer(word, sortAnswers[idx]));\n  return {\n    name: (test === null || test === void 0 ? void 0 : test.name) ? test.name : \"random\",\n    type: options.type,\n    words: test.words,\n    result: audit,\n    answers: sortAnswers,\n    options\n  };\n};\n\nexport { shuffle, generateString, auditTranslate };\n\nconst createTest = words => (amount = 10) => {\n  let randomID = [];\n  let result = {\n    name: generateString(),\n    words: []\n  };\n\n  for (let i = 0; i < amount; i++) {\n    randomID.push(Math.floor(Math.random() * 555));\n  }\n\n  ;\n  randomID.map(id => result.words.push(words[id]));\n  return result;\n};\n\nconst checkAnswer = (word, answer) => {\n  return answer.includes(word);\n};\n\nexport const makeTest = createTest(allWords);","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/client/src/specialFunction/specialFunction.ts"],"names":["allWords","generateString","Math","random","toString","replace","substr","shuffle","array","sort","auditTranslate","test","answers","options","type","translate","words","map","word","toLowerCase","sortedAnswers","_","idx","findIndex","e","audit","filter","checkAnswer","sortAnswers","name","result","createTest","amount","randomID","i","push","floor","id","answer","includes","makeTest"],"mappings":"AAAA,SAASA,QAAT,QAAyB,mBAAzB;;AAEA,MAAMC,cAAc,GAAG,MAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,OAA3B,CAAmC,UAAnC,EAA+C,EAA/C,EAAmDC,MAAnD,CAA0D,CAA1D,EAA6D,CAA7D,CAA7B;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAgB;AAC9B,SAAOA,KAAK,CAACC,IAAN,CAAW,MAAMP,IAAI,CAACC,MAAL,KAAgB,GAAjC,CAAP;AACD,CAFD;;AAIA,MAAMO,cAAc,GAAG,CACrBC,IADqB,EAErBC,OAFqB,EAGrBC,OAHqB,EAIrBV,MAJqB,KAKlB;AACH,QAAMW,IAAI,GAAID,OAAO,CAACE,SAAR,KAAsB,OAAtB,GAAgC,IAAhC,GAAuC,IAArD;AACA,QAAMC,KAAK,GAAGL,IAAI,CAACK,KAAL,CAAWC,GAAX,CAAgBC,IAAD,IAAeA,IAAI,CAACJ,IAAD,CAAJ,CAAWK,WAAX,EAA9B,CAAd;AACA,QAAMC,aAAa,GAAGjB,MAAM,CAACc,GAAP,CAAW,CAACI,CAAD,EAAIC,GAAJ,KAAYV,OAAO,CAACT,MAAM,CAACoB,SAAP,CAAkBC,CAAD,IAAOA,CAAC,KAAKF,GAA9B,CAAD,CAA9B,CAAtB;AAEA,QAAMG,KAAK,GAAGT,KAAK,CAACU,MAAN,CAAa,CAACR,IAAD,EAAeI,GAAf,KAA+BK,WAAW,CAACT,IAAD,EAAOU,WAAW,CAACN,GAAD,CAAlB,CAAvD,CAAd;AAEA,SAAO;AACLO,IAAAA,IAAI,EAAE,CAAAlB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEkB,IAAN,IAAYlB,IAAI,CAACkB,IAAjB,GAAwB,QADzB;AAELf,IAAAA,IAAI,EAAED,OAAO,CAACC,IAFT;AAGLE,IAAAA,KAAK,EAAEL,IAAI,CAACK,KAHP;AAILc,IAAAA,MAAM,EAAEL,KAJH;AAKLb,IAAAA,OAAO,EAAEgB,WALJ;AAMLf,IAAAA;AANK,GAAP;AAQD,CApBD;;AAsBA,SACEN,OADF,EAEEN,cAFF,EAGES,cAHF;;AAMA,MAAMqB,UAAe,GAAIf,KAAD,IAAgB,CAACgB,MAAc,GAAG,EAAlB,KAAyB;AAC/D,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIH,MAAW,GAAG;AAACD,IAAAA,IAAI,EAAE5B,cAAc,EAArB;AAAyBe,IAAAA,KAAK,EAAE;AAAhC,GAAlB;;AAEA,OAAI,IAAIkB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,MAAnB,EAA4BE,CAAC,EAA7B,EAAiC;AAC7BD,IAAAA,QAAQ,CAACE,IAAT,CAAcjC,IAAI,CAACkC,KAAL,CAAWlC,IAAI,CAACC,MAAL,KAAgB,GAA3B,CAAd;AACH;;AAAA;AAED8B,EAAAA,QAAQ,CAAChB,GAAT,CAAcoB,EAAD,IAAaP,MAAM,CAACd,KAAP,CAAamB,IAAb,CAAkBnB,KAAK,CAACqB,EAAD,CAAvB,CAA1B;AAEA,SAAOP,MAAP;AACD,CAXD;;AAaA,MAAMH,WAAW,GAAG,CAACT,IAAD,EAAeoB,MAAf,KAAkC;AACpD,SAAOA,MAAM,CAACC,QAAP,CAAgBrB,IAAhB,CAAP;AACD,CAFD;;AAIA,OAAO,MAAMsB,QAAQ,GAAGT,UAAU,CAAC/B,QAAD,CAA3B","sourcesContent":["import { allWords } from \"../mockData/words\";\n\nconst generateString = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n\nconst shuffle = (array: any) => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst auditTranslate = (\n  test: any,\n  answers: string[],\n  options: any,\n  random: number[]\n) => {\n  const type =  options.translate === \"en-ua\" ? \"en\" : \"ua\";\n  const words = test.words.map((word: any) => word[type].toLowerCase());\n  const sortedAnswers = random.map((_, idx) => answers[random.findIndex((e) => e === idx) as any]);\n\n  const audit = words.filter((word: string, idx: number) => checkAnswer(word, sortAnswers[idx]));\n\n  return {\n    name: test?.name? test.name : \"random\",\n    type: options.type,\n    words: test.words,\n    result: audit,\n    answers: sortAnswers,\n    options,\n  };\n};\n\nexport {\n  shuffle,\n  generateString,\n  auditTranslate,\n}\n\nconst createTest: any = (words: any) => (amount: number = 10) => {\n  let randomID = [];\n  let result: any = {name: generateString(), words: []};\n\n  for(let i = 0; i < amount ; i++) {\n      randomID.push(Math.floor(Math.random() * 555));\n  };\n\n  randomID.map((id: any) => result.words.push(words[id]));\n\n  return result\n};\n\nconst checkAnswer = (word: string, answer: string) => {\n  return answer.includes(word)\n};\n\nexport const makeTest = createTest(allWords);"]},"metadata":{},"sourceType":"module"}