{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/trainee/client/src/pages/Profile/underPages/Dictionary/Dictionary.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { shuffle } from '../../../../specialFunction/specialFunction';\nimport DictionaryOptions from './components/DictionaryOptions/DictionaryOptions';\nimport DictionaryPart from './components/DictionaryPart/DictionaryPart';\nimport { mockData } from './mockData';\nimport \"./Dictionary.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dictionary = () => {\n  _s();\n\n  const [isList, setIsList] = useState(false);\n\n  const toggleList = () => setIsList(!isList);\n\n  const [activeDictionary, setActiveDictionary] = useState(mockData[0]);\n  const [isHideColumnUa, setIsHideColumnUa] = useState(false);\n  const [isHideColumnEn, setIsHideColumnEn] = useState(false);\n\n  const toggleHideColumnUa = () => setIsHideColumnUa(!isHideColumnUa);\n\n  const toggleHideColumnEn = () => setIsHideColumnEn(!isHideColumnEn);\n\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = useForm();\n\n  const toggleActiveItem = dictionary => {\n    if (dictionary.name === activeDictionary) {\n      return;\n    } else {\n      setActiveDictionary(dictionary);\n    }\n  };\n\n  const randomDictionaryWords = activeDictionary => {\n    setActiveDictionary({\n      name: activeDictionary.name,\n      words: shuffle(activeDictionary.words)\n    });\n  };\n\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12 col-lg-9\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-words\",\n        children: /*#__PURE__*/_jsxDEV(TableWords, {\n          activeDictionary: activeDictionary,\n          register: register,\n          isHideColumnUa: isHideColumnUa,\n          isHideColumnEn: isHideColumnEn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12 col-lg-3\",\n      children: /*#__PURE__*/_jsxDEV(DictionaryOptions, {\n        isList: isList,\n        activeDictionary: activeDictionary,\n        randomDictionaryWords: randomDictionaryWords,\n        toggleActiveItem: toggleActiveItem,\n        toggleList: toggleList,\n        reset: reset,\n        toggleHideColumnUa: toggleHideColumnUa,\n        toggleHideColumnEn: toggleHideColumnEn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dictionary, \"GdEwPvCPzsNPZCBGFnH8I5Sbozk=\", false, function () {\n  return [useForm];\n});\n\n_c = Dictionary;\nexport default Dictionary;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dictionary\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/client/src/pages/Profile/underPages/Dictionary/Dictionary.tsx"],"names":["React","useState","useForm","shuffle","DictionaryOptions","DictionaryPart","mockData","Dictionary","isList","setIsList","toggleList","activeDictionary","setActiveDictionary","isHideColumnUa","setIsHideColumnUa","isHideColumnEn","setIsHideColumnEn","toggleHideColumnUa","toggleHideColumnEn","register","handleSubmit","reset","toggleActiveItem","dictionary","name","randomDictionaryWords","words","onSubmit","data","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,OAAT,QAAwB,6CAAxB;AACA,OAAOC,iBAAP,MAA8B,kDAA9B;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,mBAAP;;;AAEA,MAAMC,UAAoB,GAAG,MAAM;AAAA;;AACjC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC;;AACA,QAAMS,UAAU,GAAG,MAAMD,SAAS,CAAC,CAACD,MAAF,CAAlC;;AACA,QAAM,CAACG,gBAAD,EAAmBC,mBAAnB,IAA0CX,QAAQ,CAAMK,QAAQ,CAAC,CAAD,CAAd,CAAxD;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACc,cAAD,EAAiBC,iBAAjB,IAAsCf,QAAQ,CAAC,KAAD,CAApD;;AACA,QAAMgB,kBAAkB,GAAG,MAAMH,iBAAiB,CAAC,CAACD,cAAF,CAAlD;;AACA,QAAMK,kBAAkB,GAAG,MAAMF,iBAAiB,CAAC,CAACD,cAAF,CAAlD;;AACA,QAAM;AAAEI,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAAoCnB,OAAO,EAAjD;;AAIA,QAAMoB,gBAAgB,GAAIC,UAAD,IAAgC;AACvD,QAAGA,UAAU,CAACC,IAAX,KAAoBb,gBAAvB,EAAyC;AACvC;AACD,KAFD,MAEO;AACLC,MAAAA,mBAAmB,CAACW,UAAD,CAAnB;AACD;AACF,GAND;;AAQA,QAAME,qBAAqB,GAAId,gBAAD,IAA2B;AACvDC,IAAAA,mBAAmB,CAAC;AAClBY,MAAAA,IAAI,EAAEb,gBAAgB,CAACa,IADL;AAElBE,MAAAA,KAAK,EAAEvB,OAAO,CAACQ,gBAAgB,CAACe,KAAlB;AAFI,KAAD,CAAnB;AAID,GALD;;AAOA,QAAMC,QAAQ,GAAIC,IAAD,IAAe;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,GAFD;;AAIA,sBACE;AAAM,IAAA,QAAQ,EAAER,YAAY,CAACO,QAAD,CAA5B;AAAwC,IAAA,SAAS,EAAC,MAAlD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,gBAAgB,EAAEhB,gBADpB;AAEE,UAAA,QAAQ,EAAEQ,QAFZ;AAGE,UAAA,cAAc,EAAEN,cAHlB;AAIE,UAAA,cAAc,EAAEE;AAJlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,6BACE,QAAC,iBAAD;AACI,QAAA,MAAM,EAAEP,MADZ;AAEI,QAAA,gBAAgB,EAAEG,gBAFtB;AAGI,QAAA,qBAAqB,EAAEc,qBAH3B;AAII,QAAA,gBAAgB,EAAEH,gBAJtB;AAKI,QAAA,UAAU,EAAEZ,UALhB;AAMI,QAAA,KAAK,EAAEW,KANX;AAOI,QAAA,kBAAkB,EAAEJ,kBAPxB;AAQI,QAAA,kBAAkB,EAAEC;AARxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAzDD;;GAAMX,U;UAQsCL,O;;;KARtCK,U;AA2DN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { shuffle } from '../../../../specialFunction/specialFunction';\nimport DictionaryOptions from './components/DictionaryOptions/DictionaryOptions';\nimport DictionaryPart from './components/DictionaryPart/DictionaryPart';\nimport { mockData } from './mockData';\nimport \"./Dictionary.scss\";\n\nconst Dictionary: React.FC = () => {\n  const [isList, setIsList] = useState(false);\n  const toggleList = () => setIsList(!isList);\n  const [activeDictionary, setActiveDictionary] = useState<any>(mockData[0]);\n  const [isHideColumnUa, setIsHideColumnUa] = useState(false);\n  const [isHideColumnEn, setIsHideColumnEn] = useState(false);\n  const toggleHideColumnUa = () => setIsHideColumnUa(!isHideColumnUa);\n  const toggleHideColumnEn = () => setIsHideColumnEn(!isHideColumnEn);\n  const { register, handleSubmit, reset } = useForm();\n\n  interface DictionaryPart {name: string, words: {en: string, ua: string}}\n\n  const toggleActiveItem = (dictionary: DictionaryPart) => {\n    if(dictionary.name === activeDictionary) {\n      return\n    } else {\n      setActiveDictionary(dictionary);\n    }\n  }\n\n  const randomDictionaryWords = (activeDictionary: any) => {\n    setActiveDictionary({\n      name: activeDictionary.name, \n      words: shuffle(activeDictionary.words)\n    });\n  };\n\n  const onSubmit = (data: any) => {\n    console.log(data);\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"page\">\n      <div className=\"col-12 col-lg-9\">\n          <div className=\"table-words\">\n            <TableWords \n              activeDictionary={activeDictionary} \n              register={register}\n              isHideColumnUa={isHideColumnUa}\n              isHideColumnEn={isHideColumnEn}\n            />\n          </div>\n      </div>\n      <div className=\"col-12 col-lg-3\">\n        <DictionaryOptions \n            isList={isList}\n            activeDictionary={activeDictionary}\n            randomDictionaryWords={randomDictionaryWords}\n            toggleActiveItem={toggleActiveItem}\n            toggleList={toggleList}\n            reset={reset}\n            toggleHideColumnUa={toggleHideColumnUa}\n            toggleHideColumnEn={toggleHideColumnEn}\n        />\n      </div>\n    </form>\n  );\n};\n\nexport default Dictionary;"]},"metadata":{},"sourceType":"module"}