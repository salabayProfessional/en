{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/trainee/client/src/pages/Profile/underPages/Create-test/Cteate-test.tsx\",\n    _s = $RefreshSig$();\n\nimport { Field, Formik, Form } from 'formik';\nimport React, { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { allWords } from '../../../../mockData/words';\nimport { generateString } from '../../../../specialFunction/specialFunction';\nimport { create_test } from '../../../../store/slices/testsReducer';\nimport \"./Create-test.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateTest = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const initialValues = {\n    name: \"\",\n    amount: 10,\n    type: \"en-ua\",\n    timer: 60,\n    selectedWords: []\n  };\n  const list = useMemo(() => {\n    return allWords.map(word => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: word.en\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: word.ua\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: /*#__PURE__*/_jsxDEV(Field, {\n            type: \"checkbox\",\n            value: `${word.en}&${word.ua}`,\n            name: \"selectedWords\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)]\n      }, generateString(), true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this);\n    });\n  }, []);\n\n  const onSubmit = (values, setFieldValue) => {\n    const words = values.selectedWords.map(word => {\n      const idx = word.indexOf(\"&\");\n      return {\n        en: word.slice(0, idx),\n        ua: word.slice(idx + 1)\n      }; // split words on \"&\" en-word&ua-word\n    });\n    dispatch(create_test({\n      name: values.name,\n      words: words,\n      type: \"en-ua\",\n      options: values.options\n    }));\n    setFieldValue(\"name\", \"\");\n    setFieldValue(\"timer\", 60);\n    setFieldValue(\"amount\", 10);\n    setFieldValue(\"type\", \"en-ua\");\n    setFieldValue(\"selectedWords\", []);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-test\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        onSubmit: (values, {\n          setFieldValue\n        }) => onSubmit(values, setFieldValue),\n        children: ({\n          values,\n          handleSubmit\n        }) => {\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(\"header\", {\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Words selected: \", values.selectedWords.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(CreateTest, \"d3sm5jP6EWZQaZUIiPSAhe0SajQ=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CreateTest;\nexport default CreateTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateTest\");","map":{"version":3,"sources":["/Users/macbookpro/Documents/trainee/client/src/pages/Profile/underPages/Create-test/Cteate-test.tsx"],"names":["Field","Formik","Form","React","useMemo","useDispatch","allWords","generateString","create_test","CreateTest","dispatch","initialValues","name","amount","type","timer","selectedWords","list","map","word","en","ua","onSubmit","values","setFieldValue","words","idx","indexOf","slice","options","handleSubmit","length"],"mappings":"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","sourcesContent":["import { Field, Formik, Form } from 'formik';\nimport React, { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button, FormGroup, Label, Table } from 'reactstrap';\nimport { INP_BG } from '../../../../classes';\nimport { allWords } from '../../../../mockData/words';\nimport { generateString } from '../../../../specialFunction/specialFunction';\nimport { create_test } from '../../../../store/slices/testsReducer';\nimport \"./Create-test.scss\";\nimport { InitialValues } from './types';\n\nconst CreateTest: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const initialValues: InitialValues = {\n    name: \"\",\n    amount: 10,\n    type: \"en-ua\",\n    timer: 60,\n    selectedWords: [],\n  }\n\n  const list = useMemo(() => {\n    return allWords.map((word: {en: string, ua: string}) => {\n      return (\n        <tr key={generateString()}>\n          <td>{word.en}</td>\n          <td>{word.ua}</td>\n          <th>\n            <Field type=\"checkbox\" value={`${word.en}&${word.ua}`} name=\"selectedWords\" />\n          </th>\n        </tr>\n      )\n    })\n  }, []);\n\n  const onSubmit = (values: any, setFieldValue: any) => {\n      const words = values.selectedWords.map((word: string) => {\n        const idx = word.indexOf(\"&\");\n        return {en: word.slice(0, idx), ua: word.slice(idx + 1)};// split words on \"&\" en-word&ua-word\n      });\n  \n      dispatch(create_test({\n        name: values.name,\n        words: words,\n        type: \"en-ua\",\n        options: values.options\n      }));\n      \n      setFieldValue(\"name\", \"\");\n      setFieldValue(\"timer\", 60);\n      setFieldValue(\"amount\", 10);\n      setFieldValue(\"type\", \"en-ua\");\n      setFieldValue(\"selectedWords\", []);\n  };\n\n  return (\n    <>\n    <div className=\"create-test\">\n      <Formik initialValues={initialValues} onSubmit={(values, {setFieldValue}) => onSubmit(values, setFieldValue)}>\n        {({values, handleSubmit}) => {\n          return (\n            <Form>\n              <header>\n                <h2>Words selected: {values.selectedWords.length}</h2>\n              </header>\n                   !\n            </Form>\n          )\n        }}\n      </Formik>\n    </div>\n    </>\n  )\n}\n\nexport default CreateTest;"]},"metadata":{},"sourceType":"module"}