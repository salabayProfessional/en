{"version":3,"sources":["pages/Profile/underPages/Create-test/Cteate-test.tsx"],"names":["CreateTest","dispatch","useDispatch","list","useMemo","allWords","map","word","en","ua","type","value","name","generateString","className","initialValues","amount","timer","selectedWords","onSubmit","values","setFieldValue","words","idx","indexOf","slice","create_test","options","handleSubmit","length","for","INP_BG","placeholder","id","as","color","onClick","alert"],"mappings":"0HAAA,sHA0IeA,UA/Hc,WAC3B,IAAMC,EAAWC,cAUXC,EAAOC,mBAAQ,WACnB,OAAOC,IAASC,KAAI,SAACC,GACnB,OACE,+BACE,6BAAKA,EAAKC,KACV,6BAAKD,EAAKE,KACV,6BACE,cAAC,IAAD,CAAOC,KAAK,WAAWC,MAAK,UAAKJ,EAAKC,GAAV,YAAgBD,EAAKE,IAAMG,KAAK,sBAJvDC,oBASZ,IAsBH,OACE,mCACA,qBAAKC,UAAU,cAAf,SACE,cAAC,IAAD,CAAQC,cA7CyB,CACnCH,KAAM,GACNI,OAAQ,GACRN,KAAM,QACNO,MAAO,GACPC,cAAe,IAwCyBC,SAAU,SAACC,EAAD,UAvBnC,SAACA,EAAaC,GAC3B,IAAMC,EAAQF,EAAOF,cAAcZ,KAAI,SAACC,GACtC,IAAMgB,EAAMhB,EAAKiB,QAAQ,KACzB,MAAO,CAAChB,GAAID,EAAKkB,MAAM,EAAGF,GAAMd,GAAIF,EAAKkB,MAAMF,EAAM,OAGvDtB,EAASyB,YAAY,CACnBd,KAAMQ,EAAOR,KACbU,MAAOA,EACPZ,KAAM,QACNiB,QAASP,EAAOO,WAGlBN,EAAc,OAAQ,IACtBA,EAAc,QAAS,IACvBA,EAAc,SAAU,IACxBA,EAAc,OAAQ,SACtBA,EAAc,gBAAiB,IAM8CF,CAASC,EAAtC,EAAUC,gBAA1D,SACG,YAA6B,IAA3BD,EAA0B,EAA1BA,OAAQQ,EAAkB,EAAlBA,aACT,OACE,qCACE,iCACE,kDAAqBR,EAAOF,cAAcW,YAE5C,eAAC,IAAD,CAAMf,UAAU,oBAAhB,UACE,qBAAKA,UAAU,uBAAf,SACE,cAAC,IAAD,CAAOA,UAAU,WAAjB,SACE,gCAEIX,QAKR,sBAAKW,UAAU,gCAAf,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgB,IAAI,OAAX,kBACA,cAAC,IAAD,CAAOhB,UAAWiB,IAAQrB,KAAK,OAAOsB,YAAY,OAAOpB,KAAK,OAAOqB,GAAG,YAE1E,eAAC,IAAD,WACE,cAAC,IAAD,CAAOH,IAAI,OAAX,kBACA,eAAC,IAAD,CAAOhB,UAAWiB,IAAQG,GAAG,SAAStB,KAAK,OAAOqB,GAAG,OAArD,UACE,6CACA,mDAGJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOH,IAAI,SAAX,oBACA,eAAC,IAAD,CAAOhB,UAAWiB,IAAQG,GAAG,SAAStB,KAAK,SAASqB,GAAG,SAAvD,UACE,wCACA,wCACA,wCACA,wCACA,8CAGJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOH,IAAI,QAAX,mBACA,eAAC,IAAD,CAAOhB,UAAWiB,IAAQG,GAAG,SAAStB,KAAK,QAAQqB,GAAG,QAAtD,UACE,wCACA,wCACA,wCACA,yCACA,+CAGJ,iCACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEnB,UAAU,sBACVqB,MAAM,UACNzB,KAAK,SACL0B,QAAS,WACP,GAAGhB,EAAOF,cAAcW,SAAWT,EAAOJ,OACxC,OAAOqB,MAAM,wBAAD,OAAyBjB,EAAOJ,SAE5CqB,MAAM,WACNT,KATN","file":"static/js/3.28264a39.chunk.js","sourcesContent":["import { Field, Formik, Form } from 'formik';\nimport React, { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button, FormGroup, Label, Table } from 'reactstrap';\nimport { INP_BG } from '../../../../classes';\nimport { allWords } from '../../../../mockData/words';\nimport { generateString } from '../../../../specialFunction/specialFunction';\nimport { create_test } from '../../../../store/slices/testsReducer';\nimport \"./Create-test.scss\";\nimport { InitialValues } from './types';\n\nconst CreateTest: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const initialValues: InitialValues = {\n    name: \"\",\n    amount: 10,\n    type: \"en-ua\",\n    timer: 60,\n    selectedWords: [],\n  }\n\n  const list = useMemo(() => {\n    return allWords.map((word: {en: string, ua: string}) => {\n      return (\n        <tr key={generateString()}>\n          <td>{word.en}</td>\n          <td>{word.ua}</td>\n          <th>\n            <Field type=\"checkbox\" value={`${word.en}&${word.ua}`} name=\"selectedWords\" />\n          </th>\n        </tr>\n      )\n    })\n  }, []);\n\n  const onSubmit = (values: any, setFieldValue: any) => {\n      const words = values.selectedWords.map((word: string) => {\n        const idx = word.indexOf(\"&\");\n        return {en: word.slice(0, idx), ua: word.slice(idx + 1)};// split words on \"&\" en-word&ua-word\n      });\n  \n      dispatch(create_test({\n        name: values.name,\n        words: words,\n        type: \"en-ua\",\n        options: values.options\n      }));\n      \n      setFieldValue(\"name\", \"\");\n      setFieldValue(\"timer\", 60);\n      setFieldValue(\"amount\", 10);\n      setFieldValue(\"type\", \"en-ua\");\n      setFieldValue(\"selectedWords\", []);\n  };\n\n  return (\n    <>\n    <div className=\"create-test\">\n      <Formik initialValues={initialValues} onSubmit={(values, {setFieldValue}) => onSubmit(values, setFieldValue)}>\n        {({values, handleSubmit}) => {\n          return (\n            <>\n              <header>\n                <h2>Words selected: {values.selectedWords.length}</h2>\n              </header>\n              <Form className=\"crete-test__inner\">\n                <div className=\"left col-12 col-lg-6\">\n                  <Table className=\"bg-light\">\n                    <tbody>\n                      {\n                        list\n                      }\n                    </tbody>\n                  </Table>\n                </div>\n                <div className=\"right col-12 col-lg-6 between\">\n                  <FormGroup>\n                    <Label for=\"Name\">Name</Label>\n                    <Field className={INP_BG} type=\"text\" placeholder=\"name\" name=\"name\" id=\"Name\" />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"Type\">Type</Label>\n                    <Field className={INP_BG} as=\"select\" name=\"type\" id=\"Type\">\n                      <option>EN - UA</option>\n                      <option>UA - EN</option>\n                    </Field>\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"Amount\">Amount</Label>\n                    <Field className={INP_BG} as=\"select\" name=\"amount\" id=\"Amount\">\n                      <option>10</option>\n                      <option>15</option>\n                      <option>20</option>\n                      <option>25</option>\n                      <option>30</option>\n                    </Field>\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"Timer\">Timer</Label>\n                    <Field className={INP_BG} as=\"select\" name=\"timer\" id=\"Timer\">\n                      <option>30</option>\n                      <option>60</option>\n                      <option>90</option>\n                      <option>120</option>\n                      <option>150</option>\n                    </Field>\n                  </FormGroup>\n                  <footer>\n                    <FormGroup>\n                      <Button \n                        className=\"form-control btn-bg\" \n                        color=\"success\" \n                        type=\"button\" \n                        onClick={() => {\n                          if(values.selectedWords.length !== values.amount) {\n                            return alert(`You need to select a ${values.amount}`)\n                          } else {\n                            alert(\"success\");\n                            handleSubmit();\n                          }\n                      }}\n                      >\n                        CREATE\n                      </Button>\n                    </FormGroup>\n                  </footer>\n                </div>\n              </Form>\n            </>\n          )\n        }}\n      </Formik>\n    </div>\n    </>\n  )\n}\n\nexport default CreateTest;"],"sourceRoot":""}