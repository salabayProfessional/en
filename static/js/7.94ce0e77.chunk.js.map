{"version":3,"sources":["component/Row/Row.tsx","pages/Profile/underPages/Dictionary/mockData.ts","pages/Profile/underPages/Dictionary/components/DictionaryOptions/DictionaryOptions.tsx","pages/Profile/underPages/Dictionary/components/DictionaryPart/DictionaryPart.tsx","pages/Profile/underPages/Dictionary/Dictionary.tsx"],"names":["Row","Left","Right","rightWidth","leftWidth","fixed","className","div","animate","x","opacity","initial","transition","duration","mockData","name","words","en","ua","DictionaryOptions","isList","activeDictionary","toggleList","randomDictionaryWords","toggleActiveItem","reset","toggleHideColumnUa","toggleHideColumnEn","tableSettingList","map","item","onClick","scope","generateString","type","placeholder","Table","hover","TableWords","register","isHideColumnEn","isHideColumnUa","list","word","idx","defaultValue","Dictionary","useState","setIsList","setActiveDictionary","setIsHideColumnUa","setIsHideColumnEn","useForm","handleSubmit","onSubmit","data","console","log","shuffle","dictionary"],"mappings":"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","file":"static/js/7.94ce0e77.chunk.js","sourcesContent":["import React from \"react\";\nimport { motion } from \"framer-motion\"\nimport \"./Row.scss\";\n\nconst Row: React.FC<{\n  Left: any,\n  Right: any,\n  rightWidth?: number,\n  leftWidth?: number,\n  fixed?: \"right\" | \"left\",\n}> = ({\n  Left, \n  Right, \n  rightWidth = 6,\n  leftWidth = 6,\n  fixed = \"none\"\n}) => {\n\n  return (\n    <div className=\"row-wrapper\">\n      <motion.div \n        animate={{x: 0, opacity: 1}}\n        initial={{x: \"-100%\"}}\n        transition={{duration: 0.7, opacity: 0}}\n        className={`right col-12 col-lg-${leftWidth} ${fixed === \"left\" && \"fixed\"}`}\n      >\n        { Left }\n      </motion.div>\n      <motion.div \n        animate={{x: 0, opacity: 1}}\n        initial={{x: \"100%\"}}\n        transition={{duration: 0.7, opacity: 0}}\n        className={`right col-12 col-lg-${rightWidth} ${fixed === \"right\" && \"fixed\"}`}\n      >\n        { Right }\n      </motion.div>\n    </div>\n  )\n};\n\nexport default Row;\n","export const mockData = [\n  {\n    name: \"one\",\n    words: [\n      {en: \"sail\", ua: \"плавати\"},\n      {en: \"some\", ua: \"декілька\"},\n      {en: \"same\", ua: \"те саме\"},\n      {en: \"case\", ua: \"випадок\"},\n      {en: \"cause\", ua: \"причина\"},\n      {en: \"weak\", ua: \"слабкий\"},\n      {en: \"therefore\", ua: \"тому\"},\n      {en: \"fluent\", ua: \"впливати\"},\n      {en: \"introduce\", ua: \"представляти\"},\n      {en: \"carry out\", ua: \"продовжуй\"},\n    ]\n  },\n  {\n    name: \"two\",\n    words: [\n      {en: \"sail\", ua: \"плавати\"},\n      {en: \"\", ua: \"\"},\n      {en: \"\", ua: \"\"},\n      {en: \"\", ua: \"\"},\n      {en: \"\", ua: \"\"},\n      {en: \"\", ua: \"\"},\n    ]\n  },\n  {\n    name: \"tree\",\n    words: [\n      {en: \"sail\", ua: \"плавати\"},\n      {en: \"\", ua: \"\"},\n      {en: \"\", ua: \"\"},\n      {en: \"\", ua: \"\"},\n      {en: \"\", ua: \"\"},\n      {en: \"\", ua: \"\"},\n      {en: \"\", ua: \"\"},\n      {en: \"\", ua: \"\"},\n    ]\n  },\n];","import React from 'react';\nimport { Table } from 'reactstrap';\nimport { generateString } from '../../../../../../specialFunction/specialFunction';\nimport { mockData } from '../../mockData';\n\nconst DictionaryOptions: React.FC<any> = ({\n  isList, \n  activeDictionary, \n  toggleList, \n  randomDictionaryWords,\n  toggleActiveItem,\n  reset,\n  toggleHideColumnUa,\n  toggleHideColumnEn\n}) => {\n\n  const tableSettingList = mockData.map((item: any) => {\n    return (\n      <>\n        <tbody onClick={() => toggleActiveItem(item)} key={generateString()}>\n          <tr>\n            <th scope=\"row\">\n              {item.name}\n            </th>\n          </tr>\n        </tbody>\n       {\n         activeDictionary.name === item.name && (\n          <div className=\"active-option\">\n            <button className=\"btn btn-outline-success top-10\" onClick={() => randomDictionaryWords(activeDictionary)}>RANDOM</button>\n            <button className=\"btn btn-outline-success top-10\" onClick={() => reset()}>CLEAR ANSWER</button>\n            <button className=\"btn btn-outline-success top-10\" onClick={() => toggleHideColumnUa()}>HIDE UA COLUMN</button>\n            <button className=\"btn btn-outline-success top-10\" onClick={() => toggleHideColumnEn()}>HIDE EN COLUMN</button>\n          </div>\n         )\n       }\n      </>\n    )\n  });\n\n  return (\n    <div className=\"dictionary-options\">\n      <div className=\"dictionary-options__party\">\n        <input type=\"text\" placeholder=\"filter\" className=\"form-control btn-bg\" />\n      </div>\n      <div className=\"dictionary-options__party\">\n        <button className=\"btn btn-outline-success btn-100\">Add new dictionary</button>\n      </div>\n      <div className=\"dictionary-options__party\">\n        <button className=\"btn btn-outline-success btn-100\">DELETE</button>\n      </div>\n      <div className=\"dictionary-options__party\">\n        <button className=\"btn btn-outline-success btn-100\" onClick={() => toggleList()}>List</button>\n        {\n          isList && (\n            <Table hover>\n              {\n                tableSettingList\n              }\n            </Table>\n          )\n        }\n      </div>\n    </div>\n  )\n};\n\nexport default DictionaryOptions;\n","import React from 'react';\nimport { Table } from 'reactstrap';\nimport { generateString } from '../../../../../../specialFunction/specialFunction';\n\nconst TableWords: React.FC<any> = ({\n  activeDictionary, \n  register,\n  isHideColumnEn,\n  isHideColumnUa\n}) => {\n\n  const list = activeDictionary?.words.map((word: any, idx: number) => (\n    <tr key={generateString()}>\n      <th scope=\"row\">{ idx }</th>\n      {!isHideColumnEn? <td className=\"words-column\">{ word.en }</td> : <td className=\"words-column\"></td>}\n      {!isHideColumnUa? <td className=\"words-column\">{ word.ua }</td> : <td className=\"words-column\"></td>}\n      <td><input className=\"form-control\" defaultValue=\"\" {...register(`answers${word.en}`)} /></td>\n    </tr>\n  ));\n\n  return (\n    <>\n      <Table>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>EN</th>\n            <th>UA</th>\n            <th>YOUR</th>\n          </tr>\n        </thead>\n        <tbody>\n          { list }\n        </tbody>\n      </Table>\n      <button className=\"btn btn-outline-success btn-100\">EDIT THE DICTIONARY</button>\n    </>\n  )\n};\n\nexport default TableWords;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { shuffle } from '../../../../specialFunction/specialFunction';\nimport DictionaryOptions from './components/DictionaryOptions/DictionaryOptions';\nimport TableWords from './components/DictionaryPart/DictionaryPart';\nimport { mockData } from './mockData';\nimport \"./Dictionary.scss\";\nimport Row from '../../../../component/Row/Row';\n\nconst Dictionary: React.FC = () => {\n  const [isList, setIsList] = useState(false);\n  const toggleList = () => setIsList(!isList);\n  const [activeDictionary, setActiveDictionary] = useState<any>(mockData[0]);\n  const [isHideColumnUa, setIsHideColumnUa] = useState(false);\n  const [isHideColumnEn, setIsHideColumnEn] = useState(false);\n  const toggleHideColumnUa = () => setIsHideColumnUa(!isHideColumnUa);\n  const toggleHideColumnEn = () => setIsHideColumnEn(!isHideColumnEn);\n  const { register, handleSubmit, reset } = useForm();\n\n  interface DictionaryPart {name: string, words: {en: string, ua: string}}\n\n  const toggleActiveItem = (dictionary: DictionaryPart) => {\n    if(dictionary.name === activeDictionary) {\n      return\n    } else {\n      setActiveDictionary(dictionary);\n    }\n  }\n\n  const randomDictionaryWords = (activeDictionary: any) => {\n    setActiveDictionary({\n      name: activeDictionary.name, \n      words: shuffle(activeDictionary.words)\n    });\n  };\n\n  const onSubmit = (data: any) => {\n    console.log(data);\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} >\n      <div>\n        <Row \n          leftWidth={9}\n          Left={(\n            <div className=\"dictionary-words\">\n              <TableWords \n                activeDictionary={activeDictionary} \n                register={register}\n                isHideColumnUa={isHideColumnUa}\n                isHideColumnEn={isHideColumnEn}\n              />\n            </div>\n          )}\n          rightWidth={3}\n          Right={(\n            <DictionaryOptions \n                isList={isList}\n                activeDictionary={activeDictionary}\n                randomDictionaryWords={randomDictionaryWords}\n                toggleActiveItem={toggleActiveItem}\n                toggleList={toggleList}\n                reset={reset}\n                toggleHideColumnUa={toggleHideColumnUa}\n                toggleHideColumnEn={toggleHideColumnEn}\n            />\n          )}\n        />\n      </div>\n    </form>\n  );\n};\n\nexport default Dictionary;"],"sourceRoot":""}