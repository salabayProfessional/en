{"version":3,"sources":["pages/Profile/underPages/All-test/All-test.tsx"],"names":["AllTest","allTests","useSelector","state","tests","useState","isModal","toggleIsModal","infoID","setInfoId","toggleIsInfoModal","list","map","test","className","name","type","onClick","generateString","toggle","find"],"mappings":"sMAoDeA,UAlCW,WACxB,IAAMC,EAAWC,aAAY,SAACC,GAAD,OAAwBA,EAAMC,MAAMH,YACjE,EAAiCI,oBAAS,GAA1C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAoB,kBAAMH,GAAeD,IAEzCK,EAAOV,EAASW,KAAI,SAACC,GACzB,OACE,sBAAKC,UAAU,aAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBD,EAAKE,OAC5B,cAAC,IAAD,CAAQD,UAAU,gDAAgDE,KAAK,SAASC,QAAS,WACvFR,EAAUI,EAAKE,MACfL,KAFF,oBAF+BQ,kBAUrC,OACE,qCACE,cAAC,IAAD,CACEC,OAAQT,EACRG,KAAMZ,EAASmB,MAAK,SAACP,GAAD,OAAgBA,EAAKE,OAASP,KAClDF,QAASA,IAEX,qBAAKQ,UAAU,WAAf,SACE,qBAAKA,UAAU,kBAAf,SACIH","file":"static/js/10.8a520938.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Button } from 'reactstrap';\nimport { ModalInfo } from '../../../../component/Modal/Modals';\nimport { generateString } from '../../../../specialFunction/specialFunction';\nimport { RootReducer } from '../../../../store/slices/types';\nimport \"./All-test.scss\";\n\ninterface Test {\n  name: string\n  options: {\n    timer: number,\n    amount: number,\n  }\n  type: string\n  words: {en: string, ua: string}[]\n}\n\nconst AllTest: React.FC = () => {\n  const allTests = useSelector((state: RootReducer) => state.tests.allTests);\n  const [isModal, toggleIsModal] = useState(false);\n  const [infoID, setInfoId] = useState(\"\");\n  const toggleIsInfoModal = () => toggleIsModal(!isModal);\n\n  const list = allTests.map((test: Test) => {\n    return (\n      <div className=\"test__item\" key={generateString()}>\n        <h3 className=\"title\">{test.name}</h3>\n        <Button className=\"btn btn-success btn-center btn-bg border-none\" type=\"button\" onClick={() => {\n          setInfoId(test.name);\n          toggleIsInfoModal();\n        }}>Show</Button>\n      </div>\n    )\n  })\n\n  return (\n    <>\n      <ModalInfo \n        toggle={toggleIsInfoModal} \n        test={allTests.find((test: Test) => test.name === infoID)} \n        isModal={isModal} \n      />\n      <div className=\"All-test\">\n        <div className=\"All-test__inner\">\n          { list }\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AllTest;"],"sourceRoot":""}